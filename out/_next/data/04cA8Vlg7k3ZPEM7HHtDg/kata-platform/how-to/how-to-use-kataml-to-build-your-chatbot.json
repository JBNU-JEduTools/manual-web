{"pageProps":{"post":{"id":"how-to-use-kataml-to-build-your-chatbot","section":"How To","title":"How to Use KataML to Build Your Chatbot","prev":"how-to-use-nl-prediction-api-to-help-you-using-the-nlu-in-your-app","next":"general-faqs","body":{"raw":"\nKata ML is a descriptive YAML-based language for defining bots. The entry-point of KataML-based bot is the bot.yml file.\n\n## Specification\n\nThe root structure of bot.yml is as following:\n\n```\n# kataML schema definition\nschema: kata.ai/schema/kataml/1.0\n\n# Bot name\nname: test-bot\n# Bot description\ndesc: Some Bot\n# Bot language\nlang: id\n\n# Flow definition\nflows:\n\t # flowName and description\n\t someFlow:\n\t\t# you can include other files using $include directive\n\t\tintents: $include(./some/path)\n\n# Method definitions\nmethods:\n\t # method definition in javascript\n\t someMethod(x): x*x\n\n# NLU definition\nnlus:\n\t # define NLU to be used in this bot\n\t someNlu: ...\n\n# Config\nconfig:\n\t # free to define your nested configuration\n\n```\n\n## Include Directive\n\nKataML support `$include` directive to include definition from other files. Using this directive it is easier to structure your bot project.\nExample:\n\n```\nconfig: $include(./config.yml)\n```\n\n## Building a flow\n\nA flow consists of following definitions:\n\n- `intents` :`Dict<Intent>` which means intent definitions.\n- `states` : `Dict<State>` which means state definitions.\n- `actions` : `Dict<Action>` which means action definitions.\n- `methods` : `Dict<string>` which means Flow-specific method definitions\n  Additionally a flow can be set as following:\n- `active` : `boolean` which means you can enable/disable a flow by setting the active field of a flow.\n- `volatile` : `boolean` which means you can set it to true, then it will close the flow whenever itâ€™s outside the flow.\n- `expire` : `number` which means it will set flow to expire after a specified number of milliseconds.\n\n## Building an intent\n\nIntent can be defined as following:\n\n```\nintents:\n <name>: <Intent>\n```\n\nThe intent description contains following fields:\n\n- `type` : `\"text\" | \"command\" | \"data\"` which is to define type of the message to be associated with this intent.\n- `condition` : `string | string[]` which is condition filter to rule out certain intents to be selected.\n- `classifier` : `Classifier | Classifier[]` which is classifier definition.\n- `attributes` : `Dict<Attribute>` which is attributes / slot filling associated with the intent.\n- `fallback` : `boolean` which means define intent as fallback intent.\n- `priority` : `number` which means set priority of an intent for the selection process\n- `initial` : `boolean` which means set whether intent can be triggered only in current flow or from other flow as well.\n\n## Defining condition\n\nCondition is every valid javascript expression returning a boolean. Available variables are:\n\n- `type` : `string` which is a message type.\n- `payload` : `JsonObject` which means message payload.\n- `content` : `string` which means message content.\n- `context` : `JsonObject` which means flow context.\n- `data` : `JsonObject` which means session data.\n- `config` : `JsonObject` which means bot config.\n  Example:\n\n```\ncondition: type == 'text' && content == 'hello' && !context.completed\n```\n\n## Building classifier\n\nClassifier consists of following fields:\n\n- `nlu` : `string` which means name of defined NLU or NLU-type.\n- `hint` : `string` which means prepend message with a text fragment.\n- `match` : `string` which means match the result of the classifier with a specific string.\n- `options` : `JsonObject` which means override NLU options.\n- `process` : `method | method[]` which means postprocess intent using methods.\n  Example:\n\n```\nclassifier:\n\t nlu: topicClassifier\n\t match: food\n\t options:\n\t\tlowerCase: true\n\t\tthreshold: 0.8\n```\n\nExample Multiple Classifiers:\n\n```\nclassifier:\n - nlu: topicClassifier\n\tmatch: food\n - nlu: keywordClassifier\n\tmatch: food\n```\n\nExample mapping label using dict:\n\n```\nclassifier:\n\tnlu: topicClassifier\n\tmatch: food\n\tdict:\n\t food: [food_a, food_b], # group multiple classes to one\n\t test: testing # change label\n```\n\n## Defining attributes\n\nAttribute consist of following fields:\n\n- `nlu` : `string` which means name of defined NLU or NLU-type.\n- `hint` : `string` which means prepend message with a text fragment.\n- `path` : `string` which means result path to be taken.\n- `options` : `JsonObject` which means override NLU options.\n- `process` : `method | method[]` which means postprocess intent using methods.\n  Example:\n\n```\nattributes:\ncity:\n\tnlu: genericNER\n\tpath: LOCATION\n\toptions:\n\tthreshold: 0.6\n\tprocess:\n\t  - filterCity\n\t  - capitalize\n```\n\nExample normalizing using dict:\n\n```\nattributes:\n\t city:\n\t\tnlu: genericNER\n\t\tpath: location\n\t\toptions:\n\t\t  threshold: 0.6\n\t\tdict:\n\t\t  jakarta: [jkt, jekardah, jakarta]\n\t\t  bandung: [bdg, bandung]\n\t\t  default: invalid\n```\n\n## Building a state\n\nStates can be defined as following:\n\n```\nstates:\n\t<name>: <State>\n```\n\nThe state description contains following fields:\n\n- `initial` : `boolean` which means specify initial state.\n- `action` : `string | StateAction | StateAction[]` which means specify action to be executed.\n- `end` : `boolean` which means specify end state.\n- `transitions` : `Dict<Transition|string>` which means specify transitions.\n- `float` : `Transition` which means specify floating transition\n- `enter` : `Mapping | method` which means specify mapping or method to be executed when state is entered.\n- `transit` : `Mapping | method` which means specify mapping or method to be executed when transition is started.\n- `exit` : `Mapping | method` which means specify mapping or method to be executed when state is exited.\n\n## Defining mapping\n\nMapping is a procedure to update context / data. available variables are:\n\n- `attributes` : `JsonObject` which is attributes that is captured by intent\n- `intent` : `string` which is captured intent\n- `content` : `string` which is message content\n- `payload` : `JsonObject` which is message payload\n- `context` : `JsonObject` which is flow context\n- `data` : `JsonObject` which is session data\n  Example:\n\n```\nenter:\n\t data.name: attributes.name\n\t context.count: (context.count || 0)++\n```\n\nExample using method:\n\n```\nenter: someMapping\n```\n\nmethod definition:\n\n```\nmethods:\n\tsomeMapping(ctx): > # {intent, attributes, content, payload, data, context}\n\t\tctx.data.name = ctx.attributes.name;\n\t\tctx.context.count++;\n\t\treturn ctx;\n```\n\n## Building state actions\n\nAction can be defined as a single action or multiple actions. The state action definition contains following fields:\n\n- `name` : `string` is name of defined action or action type\n- `condition` : `string` is condition filter\n- `options` : `JsonObject` is override action options\n  Example:\n\n```\naction:\n\t name: reply\n\t options:\n\t\ttext: 'hi!'\n```\n\nExample multiple actions:\n\n```\naction:\n\t - name: reply\n\t\tcondition: context.mood = 'good'\n\t\toptions:\n\t\t  text: 'hi $(data.name)!'\n\t - name: reply\n\t\tcondition: context.mood = 'bad'\n\t\toptions:\n\t\t  text: 'apaan sih kamu!'\n```\n\nYou can simplify state actions (if you only have 1 action in some states) :\n\n```\naction: someAction\n```\n\n## Building transition\n\nTransition define condition that leads to moving from one state to the other state. A transition is defined as following:\n\n```\ntransitions:\n\t <destination>: <Transition>\n```\n\nField definition:\n\n- `condition` : `string` which means condition that trigger the transition\n- `priority` : `number` which means priority for transition selection\n- `fallback` : `boolean` which means define fallback when no other transition matches\n- `mapping` : `Mapping | method` which means define mapping or method that is triggered during this transition\n  Example:\n\n```\ntransitions:\n\t askDob:\n\t\tcondition: \"intent == 'yes' && !context.personGender && context.verifyGender\"\n\t\tmapping:\n\t\t  context.personGender: 'context.verifyGender'\n\t\t  context.verifyGender: 'null'\n```\n\nYou can simplify transitions definition :\n\n```\ntransitions\n\taskDob: \"intent == 'yes' && !context.personGender\"\n```\n\n## Building a floating State\n\nNormally it is tedious if we have to define a transition to a state that is available in every state. e.g. Cancel state. To mitigate this we can define a floating transition. The system will automatically attach this transition in every state.\n\n```\nfloat: <Transition>\n```\n\n## Defining events\n\nWe can define a mapping or method that is triggered during these events:\n\n- `enter` which means this event is triggered when entering a state\n- `transit` which means this event is triggered before transition process\n- `exit` which means this event is triggered after transition process\n\n## Building Meta Context\n\nAdditional meta context accessible in states at `context.<meta>`:\n\n- `$start` : `boolean` which means true if state is initial state\n- `$to` : `string` which means describe destination state. Available during exit\n- `$from` : `string` which means describe origin state. Available during enter\n- `$end` : `boolean` which means true if state is end state\n  Example:\n\n```\nstates:\n\t stateA:\n\t\tenter:\n\t\t  context.stateACount: (context.stateACount || 0)++\n\t\ttransit:\n\t\t  context.name: attributes.name || null\n\t\texit:\n\t\t  context.stateA.to: context.$to\n```\n\n## Building actions\n\nActions can be defined as following:\n\n```\nactions:\n <name>: <Action>\n```\n\nFollowing fields are available:\n\n- `type` : `string` which means action type.\n- `method` : `method` which means specify if action type is method\n- `options`: `JsonObject` which means action options\n- `condition` : `string` which means action condition\n  Example:\n\n```\nactions:\n\t askName:\n\t\ttype: reply\n\t\toptions:\n\t\t  text: 'nama kamu siapa?'\n```\n\n## Flow Switching\n\nWhenever bot reaches a state that is not an end state, the flow will stay open. The following message will trigger a transition to the next state. There is a case where the incoming message cannot be handled by any intents in current flow. In that case it will try to find a flow with a matching intent. When the second flow closes, the system will create internal message reenter.\n\n```\n{\n\ttype: \"command\",\n\tcontent: \"reenter\",\n\tpayload: null\n}\n```\n\nthis reenter need to be catched by the previous flow that is open:\n\n```\nintents:\n\treenter:\n\t\ttype: command\n\t\tcondition: content == \"reenter\"\n```\n\n## Building NLU\n\n### Definition\n\nA NLU consists of following definitions:\n\n- `type`: `string` which means NLU Type\n- `method` : `method` which means method name\n- `options` : `JsonObject` which means Override NLU options\n- `process` : `method | method[]` which means Postprocess intent using methods\n  Example:\n\n```\nnlus:\n\t genericNer:\n\t\ttype: verstandTagger\n\t\toptions:\n\t\tmodel: <id>\n```\n\n### Keyword NLU\n\n```\nmyNLU:\n\ttype: keyword\n\toptions:\n\t\tcase: boolean # true for case sensitive\n\t\texact: boolean # true to match only exact message\n\t\tdefault: string # default key if nothing match\n\t\tkeywords: # <key> : [<match values>]\n\t\t<key>: string[]\n```\n\nOutput:\n\n```\nstring\n```\n\nExample:\n\n```\noptions:\n\t keywords:\n\t\t'American Thin Crust':\n\t\t  - thin crust\n\t\t  - american thin crust\n\t\t  - american\n\t\t'Hawaiian':\n\t\t  - hawai\n\t\t  - hawaiian\n```\n\n### Regex NLU\n\n```\nmyRegex:\n\t type: regex\n\t options:\n\t\tregex: <regex as string>\n\t\tindex: number # optional\n```\n\nor\n\n```\nmyRegex:\n\ttype: regex\n\toptions:\n\t\tregex: <regex as string>\n\t\tindex:\n\t\t<key>: number\n```\n\nor\n\n```\nmyRegex:\n\t type: regex\n\t options:\n\t\tregex:\n\t\t <key>: <regex as string>\n```\n\nExample with index:\n\n```\nnlus:\n\t nameNLU:\n\t\ttype: regex\n\t\toptions:\n\t\t  regex: 'nama saya (.+)'\n\t\t  index: 1\n\n## usage in intent\nintents:\n\t giveName:\n\t\tattributes:\n\t\t  name:\n\t\t  nlu: nameNLU\n```\n\nExample with multiple index:\n\n```\nnlus:\n\t nameNLU:\n\t\ttype: regex\n\t\toptions:\n\t\t  regex: 'nama (saya|kamu) (.+)'\n\t\t  index:\n\t\t  who: 1\n\t\t  name: 2\n\n## usage in intent\nintents:\n\t giveName:\n\t\tattributes:\n\t\t  name:\n\t\t  nlu: nameNLU\n\t\t  path: who\n\t\t  who:\n\t\t  nlu: nameNLU\n\t\t  path: name\n```\n\nExample with multiple regex:\n\n```\nnlus:\n\t regexNlu:\n\ttype: regex\n\toptions:\n\t\t  regex:\n\t\t  name: 'nama saya (.+)'\n\t\t  email: 'w+@w+.w+'\n\n## usage in intent\nintents:\n\t giveName:\n\t\tattributes:\n\t\t  name:\n\t\t  nlu: regexNlu\n\t\t  path: name\n\t\t  who:\n\t\t  nlu: regexNLU\n\t\t  path: email\n```\n\n### NL Studio NLU\n\n```\nmynl:\n\t type: nl\n\t options:\n\t\tnluId: <nluId>\n\t\ttoken: <nluToken>\n\t\toutput:\n\t\t  <type>\n\t\t  # raw - return the raw prediction result from NL Studio\n\t\t  # value - return the value of each NLU's entity\n\t\t  # phrase - only for NL Studio entity type 'phrase'\n\t\tentity: <entityName> # only for output: phrase\n\t\tthreshold: <number> # confidence rate, if less than treshold bot wouldn't recognize as this intent\n\t\tflatten: true # optional, default false\n```\n\nExamples:\n\n```\n## usage in intent for output type value\nnlus:\n\t mynl:\n\t\ttype: nl\n\t\toptions:\n\t\t  nluId: <nluId>\n\t\t  output: value\n\t\t  threshold: 0.5\n\t\t  flatten: true\n\nintents:\n\t yes:\n\t\tclassifier:\n\t\t  nlu: mynl\n\t\t  expression: \"intent == 'yes'\" # <entityName> == <label> of entity type 'trait'\n\t name:\n\t\tclassifier:\n\t\t  nlu: mynl\n\t\t  expression: ner # <entityName> of entity type 'phrase'\n\t\tattributes:\n\t\t  person:\n\t\t  nlu: mynl\n\t\t  path: ner # <entityName>\n\n## usage in intent for output type phrase\nnlus:\n\t mynl2:\n\t\ttype: nl\n\t\toptions:\n\t\t  nluId: <nluId>\n\t\t  output: phrase\n\t\t  entity: <entityName>\n\t\t  threshold: 0.7\n\nintents:\n\tcredentials:\n\t\tclassifier:\n\t\t  nlu: mynl # use the previous bot's nlu\n\t\t  expression: \"intent == 'giveCredentials'\"\n\t\tattributes:\n\t\t  person:\n\t\t  nlu: mynl2\n\t\t  path: person Â  # <label> of mynl2's entity <enityName>\n\t\t  location:\n\t\t  nlu: mynl2\n\t\t  path: location # <label> of mynl2's entity <enityName>\n\t\t name:\n\t\tclassifier:\n\t\t  nlu: mynl2\n\t\t  expression: person # <label> of mynl2's entity <enityName>\n\t\tattributes:\n\t\t  person:\n\t\t  nlu: mynl2\n\t\t  path: person # <label>\n\n# alternative approach\nnlus:\n\tmynl3:\n\t\ttype: nl\n\t\toptions:\n\t\tnluId: <nluId>\n\nintents:\n\t yes:\n\t\tclassifier:\n\t\t  nlu: mynl3\n\t\t  options:\n\t\t  output: value\n\t\t  threshold: 0.5\n\t\t  flatten: true\n\t\t  expression: \"intent == 'yes'\"\n\t\tattributes:\n\t\t  person:\n\t\t  nlu: mynl3\n\t\t  path: person\n\t\t  options:\n\t\t\t  output: phrase\n\t\t\t  entity: ner\n\t\t\t  threshold: 0.7\n```\n\n## Method\n\n### Inline Method\n\nExample:\n\n```\nmethods:\n\tsomeMethod(x): \"\n\t  return x*x;\n\t\"\n```\n\n### Method from File\n\nExample:\n\n```\nmethod:\n\t otherMethod(x):\n\t\tcode: $include(./some/code.js)\n\t\tentry: module.exports\n\n// ./some/code.js\n\nfunction otherMethod(x) {\n\t return x * x;\n}\nmodule.exports = otherMethod;\n```\n","code":"var Component=(()=>{var r=Object.create;var s=Object.defineProperty;var m=Object.getOwnPropertyDescriptor;var p=Object.getOwnPropertyNames;var N=Object.getPrototypeOf,g=Object.prototype.hasOwnProperty;var d=i=>s(i,\"__esModule\",{value:!0});var u=(i,c)=>()=>(c||i((c={exports:{}}).exports,c),c.exports),f=(i,c)=>{for(var l in c)s(i,l,{get:c[l],enumerable:!0})},t=(i,c,l,n)=>{if(c&&typeof c==\"object\"||typeof c==\"function\")for(let a of p(c))!g.call(i,a)&&(l||a!==\"default\")&&s(i,a,{get:()=>c[a],enumerable:!(n=m(c,a))||n.enumerable});return i},w=(i,c)=>t(d(s(i!=null?r(N(i)):{},\"default\",!c&&i&&i.__esModule?{get:()=>i.default,enumerable:!0}:{value:i,enumerable:!0})),i),y=(i=>(c,l)=>i&&i.get(c)||(l=t(d({}),c,1),i&&i.set(c,l),l))(typeof WeakMap!=\"undefined\"?new WeakMap:0);var h=u((j,o)=>{o.exports=_jsx_runtime});var k={};f(k,{default:()=>v,frontmatter:()=>b});var e=w(h()),b={id:\"how-to-use-kataml-to-build-your-chatbot\",title:\"How to Use KataML to Build Your Chatbot\",prev:\"how-to-use-nl-prediction-api-to-help-you-using-the-nlu-in-your-app\",next:\"general-faqs\",section:\"How To\"};function x(i={}){let{wrapper:c}=i.components||{};return c?(0,e.jsx)(c,Object.assign({},i,{children:(0,e.jsx)(l,{})})):l();function l(){let n=Object.assign({p:\"p\",h2:\"h2\",a:\"a\",span:\"span\",pre:\"pre\",code:\"code\",ul:\"ul\",li:\"li\",h3:\"h3\"},i.components);return(0,e.jsxs)(e.Fragment,{children:[(0,e.jsx)(n.p,{children:\"Kata ML is a descriptive YAML-based language for defining bots. The entry-point of KataML-based bot is the bot.yml file.\"}),`\n`,(0,e.jsxs)(n.h2,{id:\"specification\",children:[(0,e.jsx)(n.a,{className:\"anchor\",href:\"#specification\",children:(0,e.jsx)(n.span,{className:\"icon icon-link\"})}),\"Specification\"]}),`\n`,(0,e.jsx)(n.p,{children:\"The root structure of bot.yml is as following:\"}),`\n`,(0,e.jsx)(n.pre,{children:(0,e.jsxs)(n.code,{className:\"code-highlight\",children:[(0,e.jsx)(n.span,{className:\"code-line\",children:`# kataML schema definition\n`}),(0,e.jsx)(n.span,{className:\"code-line\",children:`schema: kata.ai/schema/kataml/1.0\n`}),(0,e.jsx)(n.span,{className:\"code-line\",children:`\n`}),(0,e.jsx)(n.span,{className:\"code-line\",children:`# Bot name\n`}),(0,e.jsx)(n.span,{className:\"code-line\",children:`name: test-bot\n`}),(0,e.jsx)(n.span,{className:\"code-line\",children:`# Bot description\n`}),(0,e.jsx)(n.span,{className:\"code-line\",children:`desc: Some Bot\n`}),(0,e.jsx)(n.span,{className:\"code-line\",children:`# Bot language\n`}),(0,e.jsx)(n.span,{className:\"code-line\",children:`lang: id\n`}),(0,e.jsx)(n.span,{className:\"code-line\",children:`\n`}),(0,e.jsx)(n.span,{className:\"code-line\",children:`# Flow definition\n`}),(0,e.jsx)(n.span,{className:\"code-line\",children:`flows:\n`}),(0,e.jsx)(n.span,{className:\"code-line\",children:`\t # flowName and description\n`}),(0,e.jsx)(n.span,{className:\"code-line\",children:`\t someFlow:\n`}),(0,e.jsx)(n.span,{className:\"code-line\",children:`\t\t# you can include other files using $include directive\n`}),(0,e.jsx)(n.span,{className:\"code-line\",children:`\t\tintents: $include(./some/path)\n`}),(0,e.jsx)(n.span,{className:\"code-line\",children:`\n`}),(0,e.jsx)(n.span,{className:\"code-line\",children:`# Method definitions\n`}),(0,e.jsx)(n.span,{className:\"code-line\",children:`methods:\n`}),(0,e.jsx)(n.span,{className:\"code-line\",children:`\t # method definition in javascript\n`}),(0,e.jsx)(n.span,{className:\"code-line\",children:`\t someMethod(x): x*x\n`}),(0,e.jsx)(n.span,{className:\"code-line\",children:`\n`}),(0,e.jsx)(n.span,{className:\"code-line\",children:`# NLU definition\n`}),(0,e.jsx)(n.span,{className:\"code-line\",children:`nlus:\n`}),(0,e.jsx)(n.span,{className:\"code-line\",children:`\t # define NLU to be used in this bot\n`}),(0,e.jsx)(n.span,{className:\"code-line\",children:`\t someNlu: ...\n`}),(0,e.jsx)(n.span,{className:\"code-line\",children:`\n`}),(0,e.jsx)(n.span,{className:\"code-line\",children:`# Config\n`}),(0,e.jsx)(n.span,{className:\"code-line\",children:`config:\n`}),(0,e.jsx)(n.span,{className:\"code-line\",children:`\t # free to define your nested configuration\n`}),(0,e.jsx)(n.span,{className:\"code-line\",children:`\n`})]})}),`\n`,(0,e.jsxs)(n.h2,{id:\"include-directive\",children:[(0,e.jsx)(n.a,{className:\"anchor\",href:\"#include-directive\",children:(0,e.jsx)(n.span,{className:\"icon icon-link\"})}),\"Include Directive\"]}),`\n`,(0,e.jsxs)(n.p,{children:[\"KataML support \",(0,e.jsx)(n.code,{children:\"$include\"}),` directive to include definition from other files. Using this directive it is easier to structure your bot project.\nExample:`]}),`\n`,(0,e.jsx)(n.pre,{children:(0,e.jsx)(n.code,{className:\"code-highlight\",children:(0,e.jsx)(n.span,{className:\"code-line\",children:`config: $include(./config.yml)\n`})})}),`\n`,(0,e.jsxs)(n.h2,{id:\"building-a-flow\",children:[(0,e.jsx)(n.a,{className:\"anchor\",href:\"#building-a-flow\",children:(0,e.jsx)(n.span,{className:\"icon icon-link\"})}),\"Building a flow\"]}),`\n`,(0,e.jsx)(n.p,{children:\"A flow consists of following definitions:\"}),`\n`,(0,e.jsxs)(n.ul,{children:[`\n`,(0,e.jsxs)(n.li,{children:[(0,e.jsx)(n.code,{children:\"intents\"}),\" :\",(0,e.jsx)(n.code,{children:\"Dict<Intent>\"}),\" which means intent definitions.\"]}),`\n`,(0,e.jsxs)(n.li,{children:[(0,e.jsx)(n.code,{children:\"states\"}),\" : \",(0,e.jsx)(n.code,{children:\"Dict<State>\"}),\" which means state definitions.\"]}),`\n`,(0,e.jsxs)(n.li,{children:[(0,e.jsx)(n.code,{children:\"actions\"}),\" : \",(0,e.jsx)(n.code,{children:\"Dict<Action>\"}),\" which means action definitions.\"]}),`\n`,(0,e.jsxs)(n.li,{children:[(0,e.jsx)(n.code,{children:\"methods\"}),\" : \",(0,e.jsx)(n.code,{children:\"Dict<string>\"}),` which means Flow-specific method definitions\nAdditionally a flow can be set as following:`]}),`\n`,(0,e.jsxs)(n.li,{children:[(0,e.jsx)(n.code,{children:\"active\"}),\" : \",(0,e.jsx)(n.code,{children:\"boolean\"}),\" which means you can enable/disable a flow by setting the active field of a flow.\"]}),`\n`,(0,e.jsxs)(n.li,{children:[(0,e.jsx)(n.code,{children:\"volatile\"}),\" : \",(0,e.jsx)(n.code,{children:\"boolean\"}),\" which means you can set it to true, then it will close the flow whenever it\\u2019s outside the flow.\"]}),`\n`,(0,e.jsxs)(n.li,{children:[(0,e.jsx)(n.code,{children:\"expire\"}),\" : \",(0,e.jsx)(n.code,{children:\"number\"}),\" which means it will set flow to expire after a specified number of milliseconds.\"]}),`\n`]}),`\n`,(0,e.jsxs)(n.h2,{id:\"building-an-intent\",children:[(0,e.jsx)(n.a,{className:\"anchor\",href:\"#building-an-intent\",children:(0,e.jsx)(n.span,{className:\"icon icon-link\"})}),\"Building an intent\"]}),`\n`,(0,e.jsx)(n.p,{children:\"Intent can be defined as following:\"}),`\n`,(0,e.jsx)(n.pre,{children:(0,e.jsxs)(n.code,{className:\"code-highlight\",children:[(0,e.jsx)(n.span,{className:\"code-line\",children:`intents:\n`}),(0,e.jsx)(n.span,{className:\"code-line\",children:` <name>: <Intent>\n`})]})}),`\n`,(0,e.jsx)(n.p,{children:\"The intent description contains following fields:\"}),`\n`,(0,e.jsxs)(n.ul,{children:[`\n`,(0,e.jsxs)(n.li,{children:[(0,e.jsx)(n.code,{children:\"type\"}),\" : \",(0,e.jsx)(n.code,{children:'\"text\" | \"command\" | \"data\"'}),\" which is to define type of the message to be associated with this intent.\"]}),`\n`,(0,e.jsxs)(n.li,{children:[(0,e.jsx)(n.code,{children:\"condition\"}),\" : \",(0,e.jsx)(n.code,{children:\"string | string[]\"}),\" which is condition filter to rule out certain intents to be selected.\"]}),`\n`,(0,e.jsxs)(n.li,{children:[(0,e.jsx)(n.code,{children:\"classifier\"}),\" : \",(0,e.jsx)(n.code,{children:\"Classifier | Classifier[]\"}),\" which is classifier definition.\"]}),`\n`,(0,e.jsxs)(n.li,{children:[(0,e.jsx)(n.code,{children:\"attributes\"}),\" : \",(0,e.jsx)(n.code,{children:\"Dict<Attribute>\"}),\" which is attributes / slot filling associated with the intent.\"]}),`\n`,(0,e.jsxs)(n.li,{children:[(0,e.jsx)(n.code,{children:\"fallback\"}),\" : \",(0,e.jsx)(n.code,{children:\"boolean\"}),\" which means define intent as fallback intent.\"]}),`\n`,(0,e.jsxs)(n.li,{children:[(0,e.jsx)(n.code,{children:\"priority\"}),\" : \",(0,e.jsx)(n.code,{children:\"number\"}),\" which means set priority of an intent for the selection process\"]}),`\n`,(0,e.jsxs)(n.li,{children:[(0,e.jsx)(n.code,{children:\"initial\"}),\" : \",(0,e.jsx)(n.code,{children:\"boolean\"}),\" which means set whether intent can be triggered only in current flow or from other flow as well.\"]}),`\n`]}),`\n`,(0,e.jsxs)(n.h2,{id:\"defining-condition\",children:[(0,e.jsx)(n.a,{className:\"anchor\",href:\"#defining-condition\",children:(0,e.jsx)(n.span,{className:\"icon icon-link\"})}),\"Defining condition\"]}),`\n`,(0,e.jsx)(n.p,{children:\"Condition is every valid javascript expression returning a boolean. Available variables are:\"}),`\n`,(0,e.jsxs)(n.ul,{children:[`\n`,(0,e.jsxs)(n.li,{children:[(0,e.jsx)(n.code,{children:\"type\"}),\" : \",(0,e.jsx)(n.code,{children:\"string\"}),\" which is a message type.\"]}),`\n`,(0,e.jsxs)(n.li,{children:[(0,e.jsx)(n.code,{children:\"payload\"}),\" : \",(0,e.jsx)(n.code,{children:\"JsonObject\"}),\" which means message payload.\"]}),`\n`,(0,e.jsxs)(n.li,{children:[(0,e.jsx)(n.code,{children:\"content\"}),\" : \",(0,e.jsx)(n.code,{children:\"string\"}),\" which means message content.\"]}),`\n`,(0,e.jsxs)(n.li,{children:[(0,e.jsx)(n.code,{children:\"context\"}),\" : \",(0,e.jsx)(n.code,{children:\"JsonObject\"}),\" which means flow context.\"]}),`\n`,(0,e.jsxs)(n.li,{children:[(0,e.jsx)(n.code,{children:\"data\"}),\" : \",(0,e.jsx)(n.code,{children:\"JsonObject\"}),\" which means session data.\"]}),`\n`,(0,e.jsxs)(n.li,{children:[(0,e.jsx)(n.code,{children:\"config\"}),\" : \",(0,e.jsx)(n.code,{children:\"JsonObject\"}),` which means bot config.\nExample:`]}),`\n`]}),`\n`,(0,e.jsx)(n.pre,{children:(0,e.jsx)(n.code,{className:\"code-highlight\",children:(0,e.jsx)(n.span,{className:\"code-line\",children:`condition: type == 'text' && content == 'hello' && !context.completed\n`})})}),`\n`,(0,e.jsxs)(n.h2,{id:\"building-classifier\",children:[(0,e.jsx)(n.a,{className:\"anchor\",href:\"#building-classifier\",children:(0,e.jsx)(n.span,{className:\"icon icon-link\"})}),\"Building classifier\"]}),`\n`,(0,e.jsx)(n.p,{children:\"Classifier consists of following fields:\"}),`\n`,(0,e.jsxs)(n.ul,{children:[`\n`,(0,e.jsxs)(n.li,{children:[(0,e.jsx)(n.code,{children:\"nlu\"}),\" : \",(0,e.jsx)(n.code,{children:\"string\"}),\" which means name of defined NLU or NLU-type.\"]}),`\n`,(0,e.jsxs)(n.li,{children:[(0,e.jsx)(n.code,{children:\"hint\"}),\" : \",(0,e.jsx)(n.code,{children:\"string\"}),\" which means prepend message with a text fragment.\"]}),`\n`,(0,e.jsxs)(n.li,{children:[(0,e.jsx)(n.code,{children:\"match\"}),\" : \",(0,e.jsx)(n.code,{children:\"string\"}),\" which means match the result of the classifier with a specific string.\"]}),`\n`,(0,e.jsxs)(n.li,{children:[(0,e.jsx)(n.code,{children:\"options\"}),\" : \",(0,e.jsx)(n.code,{children:\"JsonObject\"}),\" which means override NLU options.\"]}),`\n`,(0,e.jsxs)(n.li,{children:[(0,e.jsx)(n.code,{children:\"process\"}),\" : \",(0,e.jsx)(n.code,{children:\"method | method[]\"}),` which means postprocess intent using methods.\nExample:`]}),`\n`]}),`\n`,(0,e.jsx)(n.pre,{children:(0,e.jsxs)(n.code,{className:\"code-highlight\",children:[(0,e.jsx)(n.span,{className:\"code-line\",children:`classifier:\n`}),(0,e.jsx)(n.span,{className:\"code-line\",children:`\t nlu: topicClassifier\n`}),(0,e.jsx)(n.span,{className:\"code-line\",children:`\t match: food\n`}),(0,e.jsx)(n.span,{className:\"code-line\",children:`\t options:\n`}),(0,e.jsx)(n.span,{className:\"code-line\",children:`\t\tlowerCase: true\n`}),(0,e.jsx)(n.span,{className:\"code-line\",children:`\t\tthreshold: 0.8\n`})]})}),`\n`,(0,e.jsx)(n.p,{children:\"Example Multiple Classifiers:\"}),`\n`,(0,e.jsx)(n.pre,{children:(0,e.jsxs)(n.code,{className:\"code-highlight\",children:[(0,e.jsx)(n.span,{className:\"code-line\",children:`classifier:\n`}),(0,e.jsx)(n.span,{className:\"code-line\",children:` - nlu: topicClassifier\n`}),(0,e.jsx)(n.span,{className:\"code-line\",children:`\tmatch: food\n`}),(0,e.jsx)(n.span,{className:\"code-line\",children:` - nlu: keywordClassifier\n`}),(0,e.jsx)(n.span,{className:\"code-line\",children:`\tmatch: food\n`})]})}),`\n`,(0,e.jsx)(n.p,{children:\"Example mapping label using dict:\"}),`\n`,(0,e.jsx)(n.pre,{children:(0,e.jsxs)(n.code,{className:\"code-highlight\",children:[(0,e.jsx)(n.span,{className:\"code-line\",children:`classifier:\n`}),(0,e.jsx)(n.span,{className:\"code-line\",children:`\tnlu: topicClassifier\n`}),(0,e.jsx)(n.span,{className:\"code-line\",children:`\tmatch: food\n`}),(0,e.jsx)(n.span,{className:\"code-line\",children:`\tdict:\n`}),(0,e.jsx)(n.span,{className:\"code-line\",children:`\t food: [food_a, food_b], # group multiple classes to one\n`}),(0,e.jsx)(n.span,{className:\"code-line\",children:`\t test: testing # change label\n`})]})}),`\n`,(0,e.jsxs)(n.h2,{id:\"defining-attributes\",children:[(0,e.jsx)(n.a,{className:\"anchor\",href:\"#defining-attributes\",children:(0,e.jsx)(n.span,{className:\"icon icon-link\"})}),\"Defining attributes\"]}),`\n`,(0,e.jsx)(n.p,{children:\"Attribute consist of following fields:\"}),`\n`,(0,e.jsxs)(n.ul,{children:[`\n`,(0,e.jsxs)(n.li,{children:[(0,e.jsx)(n.code,{children:\"nlu\"}),\" : \",(0,e.jsx)(n.code,{children:\"string\"}),\" which means name of defined NLU or NLU-type.\"]}),`\n`,(0,e.jsxs)(n.li,{children:[(0,e.jsx)(n.code,{children:\"hint\"}),\" : \",(0,e.jsx)(n.code,{children:\"string\"}),\" which means prepend message with a text fragment.\"]}),`\n`,(0,e.jsxs)(n.li,{children:[(0,e.jsx)(n.code,{children:\"path\"}),\" : \",(0,e.jsx)(n.code,{children:\"string\"}),\" which means result path to be taken.\"]}),`\n`,(0,e.jsxs)(n.li,{children:[(0,e.jsx)(n.code,{children:\"options\"}),\" : \",(0,e.jsx)(n.code,{children:\"JsonObject\"}),\" which means override NLU options.\"]}),`\n`,(0,e.jsxs)(n.li,{children:[(0,e.jsx)(n.code,{children:\"process\"}),\" : \",(0,e.jsx)(n.code,{children:\"method | method[]\"}),` which means postprocess intent using methods.\nExample:`]}),`\n`]}),`\n`,(0,e.jsx)(n.pre,{children:(0,e.jsxs)(n.code,{className:\"code-highlight\",children:[(0,e.jsx)(n.span,{className:\"code-line\",children:`attributes:\n`}),(0,e.jsx)(n.span,{className:\"code-line\",children:`city:\n`}),(0,e.jsx)(n.span,{className:\"code-line\",children:`\tnlu: genericNER\n`}),(0,e.jsx)(n.span,{className:\"code-line\",children:`\tpath: LOCATION\n`}),(0,e.jsx)(n.span,{className:\"code-line\",children:`\toptions:\n`}),(0,e.jsx)(n.span,{className:\"code-line\",children:`\tthreshold: 0.6\n`}),(0,e.jsx)(n.span,{className:\"code-line\",children:`\tprocess:\n`}),(0,e.jsx)(n.span,{className:\"code-line\",children:`\t  - filterCity\n`}),(0,e.jsx)(n.span,{className:\"code-line\",children:`\t  - capitalize\n`})]})}),`\n`,(0,e.jsx)(n.p,{children:\"Example normalizing using dict:\"}),`\n`,(0,e.jsx)(n.pre,{children:(0,e.jsxs)(n.code,{className:\"code-highlight\",children:[(0,e.jsx)(n.span,{className:\"code-line\",children:`attributes:\n`}),(0,e.jsx)(n.span,{className:\"code-line\",children:`\t city:\n`}),(0,e.jsx)(n.span,{className:\"code-line\",children:`\t\tnlu: genericNER\n`}),(0,e.jsx)(n.span,{className:\"code-line\",children:`\t\tpath: location\n`}),(0,e.jsx)(n.span,{className:\"code-line\",children:`\t\toptions:\n`}),(0,e.jsx)(n.span,{className:\"code-line\",children:`\t\t  threshold: 0.6\n`}),(0,e.jsx)(n.span,{className:\"code-line\",children:`\t\tdict:\n`}),(0,e.jsx)(n.span,{className:\"code-line\",children:`\t\t  jakarta: [jkt, jekardah, jakarta]\n`}),(0,e.jsx)(n.span,{className:\"code-line\",children:`\t\t  bandung: [bdg, bandung]\n`}),(0,e.jsx)(n.span,{className:\"code-line\",children:`\t\t  default: invalid\n`})]})}),`\n`,(0,e.jsxs)(n.h2,{id:\"building-a-state\",children:[(0,e.jsx)(n.a,{className:\"anchor\",href:\"#building-a-state\",children:(0,e.jsx)(n.span,{className:\"icon icon-link\"})}),\"Building a state\"]}),`\n`,(0,e.jsx)(n.p,{children:\"States can be defined as following:\"}),`\n`,(0,e.jsx)(n.pre,{children:(0,e.jsxs)(n.code,{className:\"code-highlight\",children:[(0,e.jsx)(n.span,{className:\"code-line\",children:`states:\n`}),(0,e.jsx)(n.span,{className:\"code-line\",children:`\t<name>: <State>\n`})]})}),`\n`,(0,e.jsx)(n.p,{children:\"The state description contains following fields:\"}),`\n`,(0,e.jsxs)(n.ul,{children:[`\n`,(0,e.jsxs)(n.li,{children:[(0,e.jsx)(n.code,{children:\"initial\"}),\" : \",(0,e.jsx)(n.code,{children:\"boolean\"}),\" which means specify initial state.\"]}),`\n`,(0,e.jsxs)(n.li,{children:[(0,e.jsx)(n.code,{children:\"action\"}),\" : \",(0,e.jsx)(n.code,{children:\"string | StateAction | StateAction[]\"}),\" which means specify action to be executed.\"]}),`\n`,(0,e.jsxs)(n.li,{children:[(0,e.jsx)(n.code,{children:\"end\"}),\" : \",(0,e.jsx)(n.code,{children:\"boolean\"}),\" which means specify end state.\"]}),`\n`,(0,e.jsxs)(n.li,{children:[(0,e.jsx)(n.code,{children:\"transitions\"}),\" : \",(0,e.jsx)(n.code,{children:\"Dict<Transition|string>\"}),\" which means specify transitions.\"]}),`\n`,(0,e.jsxs)(n.li,{children:[(0,e.jsx)(n.code,{children:\"float\"}),\" : \",(0,e.jsx)(n.code,{children:\"Transition\"}),\" which means specify floating transition\"]}),`\n`,(0,e.jsxs)(n.li,{children:[(0,e.jsx)(n.code,{children:\"enter\"}),\" : \",(0,e.jsx)(n.code,{children:\"Mapping | method\"}),\" which means specify mapping or method to be executed when state is entered.\"]}),`\n`,(0,e.jsxs)(n.li,{children:[(0,e.jsx)(n.code,{children:\"transit\"}),\" : \",(0,e.jsx)(n.code,{children:\"Mapping | method\"}),\" which means specify mapping or method to be executed when transition is started.\"]}),`\n`,(0,e.jsxs)(n.li,{children:[(0,e.jsx)(n.code,{children:\"exit\"}),\" : \",(0,e.jsx)(n.code,{children:\"Mapping | method\"}),\" which means specify mapping or method to be executed when state is exited.\"]}),`\n`]}),`\n`,(0,e.jsxs)(n.h2,{id:\"defining-mapping\",children:[(0,e.jsx)(n.a,{className:\"anchor\",href:\"#defining-mapping\",children:(0,e.jsx)(n.span,{className:\"icon icon-link\"})}),\"Defining mapping\"]}),`\n`,(0,e.jsx)(n.p,{children:\"Mapping is a procedure to update context / data. available variables are:\"}),`\n`,(0,e.jsxs)(n.ul,{children:[`\n`,(0,e.jsxs)(n.li,{children:[(0,e.jsx)(n.code,{children:\"attributes\"}),\" : \",(0,e.jsx)(n.code,{children:\"JsonObject\"}),\" which is attributes that is captured by intent\"]}),`\n`,(0,e.jsxs)(n.li,{children:[(0,e.jsx)(n.code,{children:\"intent\"}),\" : \",(0,e.jsx)(n.code,{children:\"string\"}),\" which is captured intent\"]}),`\n`,(0,e.jsxs)(n.li,{children:[(0,e.jsx)(n.code,{children:\"content\"}),\" : \",(0,e.jsx)(n.code,{children:\"string\"}),\" which is message content\"]}),`\n`,(0,e.jsxs)(n.li,{children:[(0,e.jsx)(n.code,{children:\"payload\"}),\" : \",(0,e.jsx)(n.code,{children:\"JsonObject\"}),\" which is message payload\"]}),`\n`,(0,e.jsxs)(n.li,{children:[(0,e.jsx)(n.code,{children:\"context\"}),\" : \",(0,e.jsx)(n.code,{children:\"JsonObject\"}),\" which is flow context\"]}),`\n`,(0,e.jsxs)(n.li,{children:[(0,e.jsx)(n.code,{children:\"data\"}),\" : \",(0,e.jsx)(n.code,{children:\"JsonObject\"}),` which is session data\nExample:`]}),`\n`]}),`\n`,(0,e.jsx)(n.pre,{children:(0,e.jsxs)(n.code,{className:\"code-highlight\",children:[(0,e.jsx)(n.span,{className:\"code-line\",children:`enter:\n`}),(0,e.jsx)(n.span,{className:\"code-line\",children:`\t data.name: attributes.name\n`}),(0,e.jsx)(n.span,{className:\"code-line\",children:`\t context.count: (context.count || 0)++\n`})]})}),`\n`,(0,e.jsx)(n.p,{children:\"Example using method:\"}),`\n`,(0,e.jsx)(n.pre,{children:(0,e.jsx)(n.code,{className:\"code-highlight\",children:(0,e.jsx)(n.span,{className:\"code-line\",children:`enter: someMapping\n`})})}),`\n`,(0,e.jsx)(n.p,{children:\"method definition:\"}),`\n`,(0,e.jsx)(n.pre,{children:(0,e.jsxs)(n.code,{className:\"code-highlight\",children:[(0,e.jsx)(n.span,{className:\"code-line\",children:`methods:\n`}),(0,e.jsx)(n.span,{className:\"code-line\",children:`\tsomeMapping(ctx): > # {intent, attributes, content, payload, data, context}\n`}),(0,e.jsx)(n.span,{className:\"code-line\",children:`\t\tctx.data.name = ctx.attributes.name;\n`}),(0,e.jsx)(n.span,{className:\"code-line\",children:`\t\tctx.context.count++;\n`}),(0,e.jsx)(n.span,{className:\"code-line\",children:`\t\treturn ctx;\n`})]})}),`\n`,(0,e.jsxs)(n.h2,{id:\"building-state-actions\",children:[(0,e.jsx)(n.a,{className:\"anchor\",href:\"#building-state-actions\",children:(0,e.jsx)(n.span,{className:\"icon icon-link\"})}),\"Building state actions\"]}),`\n`,(0,e.jsx)(n.p,{children:\"Action can be defined as a single action or multiple actions. The state action definition contains following fields:\"}),`\n`,(0,e.jsxs)(n.ul,{children:[`\n`,(0,e.jsxs)(n.li,{children:[(0,e.jsx)(n.code,{children:\"name\"}),\" : \",(0,e.jsx)(n.code,{children:\"string\"}),\" is name of defined action or action type\"]}),`\n`,(0,e.jsxs)(n.li,{children:[(0,e.jsx)(n.code,{children:\"condition\"}),\" : \",(0,e.jsx)(n.code,{children:\"string\"}),\" is condition filter\"]}),`\n`,(0,e.jsxs)(n.li,{children:[(0,e.jsx)(n.code,{children:\"options\"}),\" : \",(0,e.jsx)(n.code,{children:\"JsonObject\"}),` is override action options\nExample:`]}),`\n`]}),`\n`,(0,e.jsx)(n.pre,{children:(0,e.jsxs)(n.code,{className:\"code-highlight\",children:[(0,e.jsx)(n.span,{className:\"code-line\",children:`action:\n`}),(0,e.jsx)(n.span,{className:\"code-line\",children:`\t name: reply\n`}),(0,e.jsx)(n.span,{className:\"code-line\",children:`\t options:\n`}),(0,e.jsx)(n.span,{className:\"code-line\",children:`\t\ttext: 'hi!'\n`})]})}),`\n`,(0,e.jsx)(n.p,{children:\"Example multiple actions:\"}),`\n`,(0,e.jsx)(n.pre,{children:(0,e.jsxs)(n.code,{className:\"code-highlight\",children:[(0,e.jsx)(n.span,{className:\"code-line\",children:`action:\n`}),(0,e.jsx)(n.span,{className:\"code-line\",children:`\t - name: reply\n`}),(0,e.jsx)(n.span,{className:\"code-line\",children:`\t\tcondition: context.mood = 'good'\n`}),(0,e.jsx)(n.span,{className:\"code-line\",children:`\t\toptions:\n`}),(0,e.jsx)(n.span,{className:\"code-line\",children:`\t\t  text: 'hi $(data.name)!'\n`}),(0,e.jsx)(n.span,{className:\"code-line\",children:`\t - name: reply\n`}),(0,e.jsx)(n.span,{className:\"code-line\",children:`\t\tcondition: context.mood = 'bad'\n`}),(0,e.jsx)(n.span,{className:\"code-line\",children:`\t\toptions:\n`}),(0,e.jsx)(n.span,{className:\"code-line\",children:`\t\t  text: 'apaan sih kamu!'\n`})]})}),`\n`,(0,e.jsx)(n.p,{children:\"You can simplify state actions (if you only have 1 action in some states) :\"}),`\n`,(0,e.jsx)(n.pre,{children:(0,e.jsx)(n.code,{className:\"code-highlight\",children:(0,e.jsx)(n.span,{className:\"code-line\",children:`action: someAction\n`})})}),`\n`,(0,e.jsxs)(n.h2,{id:\"building-transition\",children:[(0,e.jsx)(n.a,{className:\"anchor\",href:\"#building-transition\",children:(0,e.jsx)(n.span,{className:\"icon icon-link\"})}),\"Building transition\"]}),`\n`,(0,e.jsx)(n.p,{children:\"Transition define condition that leads to moving from one state to the other state. A transition is defined as following:\"}),`\n`,(0,e.jsx)(n.pre,{children:(0,e.jsxs)(n.code,{className:\"code-highlight\",children:[(0,e.jsx)(n.span,{className:\"code-line\",children:`transitions:\n`}),(0,e.jsx)(n.span,{className:\"code-line\",children:`\t <destination>: <Transition>\n`})]})}),`\n`,(0,e.jsx)(n.p,{children:\"Field definition:\"}),`\n`,(0,e.jsxs)(n.ul,{children:[`\n`,(0,e.jsxs)(n.li,{children:[(0,e.jsx)(n.code,{children:\"condition\"}),\" : \",(0,e.jsx)(n.code,{children:\"string\"}),\" which means condition that trigger the transition\"]}),`\n`,(0,e.jsxs)(n.li,{children:[(0,e.jsx)(n.code,{children:\"priority\"}),\" : \",(0,e.jsx)(n.code,{children:\"number\"}),\" which means priority for transition selection\"]}),`\n`,(0,e.jsxs)(n.li,{children:[(0,e.jsx)(n.code,{children:\"fallback\"}),\" : \",(0,e.jsx)(n.code,{children:\"boolean\"}),\" which means define fallback when no other transition matches\"]}),`\n`,(0,e.jsxs)(n.li,{children:[(0,e.jsx)(n.code,{children:\"mapping\"}),\" : \",(0,e.jsx)(n.code,{children:\"Mapping | method\"}),` which means define mapping or method that is triggered during this transition\nExample:`]}),`\n`]}),`\n`,(0,e.jsx)(n.pre,{children:(0,e.jsxs)(n.code,{className:\"code-highlight\",children:[(0,e.jsx)(n.span,{className:\"code-line\",children:`transitions:\n`}),(0,e.jsx)(n.span,{className:\"code-line\",children:`\t askDob:\n`}),(0,e.jsx)(n.span,{className:\"code-line\",children:`\t\tcondition: \"intent == 'yes' && !context.personGender && context.verifyGender\"\n`}),(0,e.jsx)(n.span,{className:\"code-line\",children:`\t\tmapping:\n`}),(0,e.jsx)(n.span,{className:\"code-line\",children:`\t\t  context.personGender: 'context.verifyGender'\n`}),(0,e.jsx)(n.span,{className:\"code-line\",children:`\t\t  context.verifyGender: 'null'\n`})]})}),`\n`,(0,e.jsx)(n.p,{children:\"You can simplify transitions definition :\"}),`\n`,(0,e.jsx)(n.pre,{children:(0,e.jsxs)(n.code,{className:\"code-highlight\",children:[(0,e.jsx)(n.span,{className:\"code-line\",children:`transitions\n`}),(0,e.jsx)(n.span,{className:\"code-line\",children:`\taskDob: \"intent == 'yes' && !context.personGender\"\n`})]})}),`\n`,(0,e.jsxs)(n.h2,{id:\"building-a-floating-state\",children:[(0,e.jsx)(n.a,{className:\"anchor\",href:\"#building-a-floating-state\",children:(0,e.jsx)(n.span,{className:\"icon icon-link\"})}),\"Building a floating State\"]}),`\n`,(0,e.jsx)(n.p,{children:\"Normally it is tedious if we have to define a transition to a state that is available in every state. e.g. Cancel state. To mitigate this we can define a floating transition. The system will automatically attach this transition in every state.\"}),`\n`,(0,e.jsx)(n.pre,{children:(0,e.jsx)(n.code,{className:\"code-highlight\",children:(0,e.jsx)(n.span,{className:\"code-line\",children:`float: <Transition>\n`})})}),`\n`,(0,e.jsxs)(n.h2,{id:\"defining-events\",children:[(0,e.jsx)(n.a,{className:\"anchor\",href:\"#defining-events\",children:(0,e.jsx)(n.span,{className:\"icon icon-link\"})}),\"Defining events\"]}),`\n`,(0,e.jsx)(n.p,{children:\"We can define a mapping or method that is triggered during these events:\"}),`\n`,(0,e.jsxs)(n.ul,{children:[`\n`,(0,e.jsxs)(n.li,{children:[(0,e.jsx)(n.code,{children:\"enter\"}),\" which means this event is triggered when entering a state\"]}),`\n`,(0,e.jsxs)(n.li,{children:[(0,e.jsx)(n.code,{children:\"transit\"}),\" which means this event is triggered before transition process\"]}),`\n`,(0,e.jsxs)(n.li,{children:[(0,e.jsx)(n.code,{children:\"exit\"}),\" which means this event is triggered after transition process\"]}),`\n`]}),`\n`,(0,e.jsxs)(n.h2,{id:\"building-meta-context\",children:[(0,e.jsx)(n.a,{className:\"anchor\",href:\"#building-meta-context\",children:(0,e.jsx)(n.span,{className:\"icon icon-link\"})}),\"Building Meta Context\"]}),`\n`,(0,e.jsxs)(n.p,{children:[\"Additional meta context accessible in states at \",(0,e.jsx)(n.code,{children:\"context.<meta>\"}),\":\"]}),`\n`,(0,e.jsxs)(n.ul,{children:[`\n`,(0,e.jsxs)(n.li,{children:[(0,e.jsx)(n.code,{children:\"$start\"}),\" : \",(0,e.jsx)(n.code,{children:\"boolean\"}),\" which means true if state is initial state\"]}),`\n`,(0,e.jsxs)(n.li,{children:[(0,e.jsx)(n.code,{children:\"$to\"}),\" : \",(0,e.jsx)(n.code,{children:\"string\"}),\" which means describe destination state. Available during exit\"]}),`\n`,(0,e.jsxs)(n.li,{children:[(0,e.jsx)(n.code,{children:\"$from\"}),\" : \",(0,e.jsx)(n.code,{children:\"string\"}),\" which means describe origin state. Available during enter\"]}),`\n`,(0,e.jsxs)(n.li,{children:[(0,e.jsx)(n.code,{children:\"$end\"}),\" : \",(0,e.jsx)(n.code,{children:\"boolean\"}),` which means true if state is end state\nExample:`]}),`\n`]}),`\n`,(0,e.jsx)(n.pre,{children:(0,e.jsxs)(n.code,{className:\"code-highlight\",children:[(0,e.jsx)(n.span,{className:\"code-line\",children:`states:\n`}),(0,e.jsx)(n.span,{className:\"code-line\",children:`\t stateA:\n`}),(0,e.jsx)(n.span,{className:\"code-line\",children:`\t\tenter:\n`}),(0,e.jsx)(n.span,{className:\"code-line\",children:`\t\t  context.stateACount: (context.stateACount || 0)++\n`}),(0,e.jsx)(n.span,{className:\"code-line\",children:`\t\ttransit:\n`}),(0,e.jsx)(n.span,{className:\"code-line\",children:`\t\t  context.name: attributes.name || null\n`}),(0,e.jsx)(n.span,{className:\"code-line\",children:`\t\texit:\n`}),(0,e.jsx)(n.span,{className:\"code-line\",children:`\t\t  context.stateA.to: context.$to\n`})]})}),`\n`,(0,e.jsxs)(n.h2,{id:\"building-actions\",children:[(0,e.jsx)(n.a,{className:\"anchor\",href:\"#building-actions\",children:(0,e.jsx)(n.span,{className:\"icon icon-link\"})}),\"Building actions\"]}),`\n`,(0,e.jsx)(n.p,{children:\"Actions can be defined as following:\"}),`\n`,(0,e.jsx)(n.pre,{children:(0,e.jsxs)(n.code,{className:\"code-highlight\",children:[(0,e.jsx)(n.span,{className:\"code-line\",children:`actions:\n`}),(0,e.jsx)(n.span,{className:\"code-line\",children:` <name>: <Action>\n`})]})}),`\n`,(0,e.jsx)(n.p,{children:\"Following fields are available:\"}),`\n`,(0,e.jsxs)(n.ul,{children:[`\n`,(0,e.jsxs)(n.li,{children:[(0,e.jsx)(n.code,{children:\"type\"}),\" : \",(0,e.jsx)(n.code,{children:\"string\"}),\" which means action type.\"]}),`\n`,(0,e.jsxs)(n.li,{children:[(0,e.jsx)(n.code,{children:\"method\"}),\" : \",(0,e.jsx)(n.code,{children:\"method\"}),\" which means specify if action type is method\"]}),`\n`,(0,e.jsxs)(n.li,{children:[(0,e.jsx)(n.code,{children:\"options\"}),\": \",(0,e.jsx)(n.code,{children:\"JsonObject\"}),\" which means action options\"]}),`\n`,(0,e.jsxs)(n.li,{children:[(0,e.jsx)(n.code,{children:\"condition\"}),\" : \",(0,e.jsx)(n.code,{children:\"string\"}),` which means action condition\nExample:`]}),`\n`]}),`\n`,(0,e.jsx)(n.pre,{children:(0,e.jsxs)(n.code,{className:\"code-highlight\",children:[(0,e.jsx)(n.span,{className:\"code-line\",children:`actions:\n`}),(0,e.jsx)(n.span,{className:\"code-line\",children:`\t askName:\n`}),(0,e.jsx)(n.span,{className:\"code-line\",children:`\t\ttype: reply\n`}),(0,e.jsx)(n.span,{className:\"code-line\",children:`\t\toptions:\n`}),(0,e.jsx)(n.span,{className:\"code-line\",children:`\t\t  text: 'nama kamu siapa?'\n`})]})}),`\n`,(0,e.jsxs)(n.h2,{id:\"flow-switching\",children:[(0,e.jsx)(n.a,{className:\"anchor\",href:\"#flow-switching\",children:(0,e.jsx)(n.span,{className:\"icon icon-link\"})}),\"Flow Switching\"]}),`\n`,(0,e.jsx)(n.p,{children:\"Whenever bot reaches a state that is not an end state, the flow will stay open. The following message will trigger a transition to the next state. There is a case where the incoming message cannot be handled by any intents in current flow. In that case it will try to find a flow with a matching intent. When the second flow closes, the system will create internal message reenter.\"}),`\n`,(0,e.jsx)(n.pre,{children:(0,e.jsxs)(n.code,{className:\"code-highlight\",children:[(0,e.jsx)(n.span,{className:\"code-line\",children:`{\n`}),(0,e.jsx)(n.span,{className:\"code-line\",children:`\ttype: \"command\",\n`}),(0,e.jsx)(n.span,{className:\"code-line\",children:`\tcontent: \"reenter\",\n`}),(0,e.jsx)(n.span,{className:\"code-line\",children:`\tpayload: null\n`}),(0,e.jsx)(n.span,{className:\"code-line\",children:`}\n`})]})}),`\n`,(0,e.jsx)(n.p,{children:\"this reenter need to be catched by the previous flow that is open:\"}),`\n`,(0,e.jsx)(n.pre,{children:(0,e.jsxs)(n.code,{className:\"code-highlight\",children:[(0,e.jsx)(n.span,{className:\"code-line\",children:`intents:\n`}),(0,e.jsx)(n.span,{className:\"code-line\",children:`\treenter:\n`}),(0,e.jsx)(n.span,{className:\"code-line\",children:`\t\ttype: command\n`}),(0,e.jsx)(n.span,{className:\"code-line\",children:`\t\tcondition: content == \"reenter\"\n`})]})}),`\n`,(0,e.jsxs)(n.h2,{id:\"building-nlu\",children:[(0,e.jsx)(n.a,{className:\"anchor\",href:\"#building-nlu\",children:(0,e.jsx)(n.span,{className:\"icon icon-link\"})}),\"Building NLU\"]}),`\n`,(0,e.jsxs)(n.h3,{id:\"definition\",children:[(0,e.jsx)(n.a,{className:\"anchor\",href:\"#definition\",children:(0,e.jsx)(n.span,{className:\"icon icon-link\"})}),\"Definition\"]}),`\n`,(0,e.jsx)(n.p,{children:\"A NLU consists of following definitions:\"}),`\n`,(0,e.jsxs)(n.ul,{children:[`\n`,(0,e.jsxs)(n.li,{children:[(0,e.jsx)(n.code,{children:\"type\"}),\": \",(0,e.jsx)(n.code,{children:\"string\"}),\" which means NLU Type\"]}),`\n`,(0,e.jsxs)(n.li,{children:[(0,e.jsx)(n.code,{children:\"method\"}),\" : \",(0,e.jsx)(n.code,{children:\"method\"}),\" which means method name\"]}),`\n`,(0,e.jsxs)(n.li,{children:[(0,e.jsx)(n.code,{children:\"options\"}),\" : \",(0,e.jsx)(n.code,{children:\"JsonObject\"}),\" which means Override NLU options\"]}),`\n`,(0,e.jsxs)(n.li,{children:[(0,e.jsx)(n.code,{children:\"process\"}),\" : \",(0,e.jsx)(n.code,{children:\"method | method[]\"}),` which means Postprocess intent using methods\nExample:`]}),`\n`]}),`\n`,(0,e.jsx)(n.pre,{children:(0,e.jsxs)(n.code,{className:\"code-highlight\",children:[(0,e.jsx)(n.span,{className:\"code-line\",children:`nlus:\n`}),(0,e.jsx)(n.span,{className:\"code-line\",children:`\t genericNer:\n`}),(0,e.jsx)(n.span,{className:\"code-line\",children:`\t\ttype: verstandTagger\n`}),(0,e.jsx)(n.span,{className:\"code-line\",children:`\t\toptions:\n`}),(0,e.jsx)(n.span,{className:\"code-line\",children:`\t\tmodel: <id>\n`})]})}),`\n`,(0,e.jsxs)(n.h3,{id:\"keyword-nlu\",children:[(0,e.jsx)(n.a,{className:\"anchor\",href:\"#keyword-nlu\",children:(0,e.jsx)(n.span,{className:\"icon icon-link\"})}),\"Keyword NLU\"]}),`\n`,(0,e.jsx)(n.pre,{children:(0,e.jsxs)(n.code,{className:\"code-highlight\",children:[(0,e.jsx)(n.span,{className:\"code-line\",children:`myNLU:\n`}),(0,e.jsx)(n.span,{className:\"code-line\",children:`\ttype: keyword\n`}),(0,e.jsx)(n.span,{className:\"code-line\",children:`\toptions:\n`}),(0,e.jsx)(n.span,{className:\"code-line\",children:`\t\tcase: boolean # true for case sensitive\n`}),(0,e.jsx)(n.span,{className:\"code-line\",children:`\t\texact: boolean # true to match only exact message\n`}),(0,e.jsx)(n.span,{className:\"code-line\",children:`\t\tdefault: string # default key if nothing match\n`}),(0,e.jsx)(n.span,{className:\"code-line\",children:`\t\tkeywords: # <key> : [<match values>]\n`}),(0,e.jsx)(n.span,{className:\"code-line\",children:`\t\t<key>: string[]\n`})]})}),`\n`,(0,e.jsx)(n.p,{children:\"Output:\"}),`\n`,(0,e.jsx)(n.pre,{children:(0,e.jsx)(n.code,{className:\"code-highlight\",children:(0,e.jsx)(n.span,{className:\"code-line\",children:`string\n`})})}),`\n`,(0,e.jsx)(n.p,{children:\"Example:\"}),`\n`,(0,e.jsx)(n.pre,{children:(0,e.jsxs)(n.code,{className:\"code-highlight\",children:[(0,e.jsx)(n.span,{className:\"code-line\",children:`options:\n`}),(0,e.jsx)(n.span,{className:\"code-line\",children:`\t keywords:\n`}),(0,e.jsx)(n.span,{className:\"code-line\",children:`\t\t'American Thin Crust':\n`}),(0,e.jsx)(n.span,{className:\"code-line\",children:`\t\t  - thin crust\n`}),(0,e.jsx)(n.span,{className:\"code-line\",children:`\t\t  - american thin crust\n`}),(0,e.jsx)(n.span,{className:\"code-line\",children:`\t\t  - american\n`}),(0,e.jsx)(n.span,{className:\"code-line\",children:`\t\t'Hawaiian':\n`}),(0,e.jsx)(n.span,{className:\"code-line\",children:`\t\t  - hawai\n`}),(0,e.jsx)(n.span,{className:\"code-line\",children:`\t\t  - hawaiian\n`})]})}),`\n`,(0,e.jsxs)(n.h3,{id:\"regex-nlu\",children:[(0,e.jsx)(n.a,{className:\"anchor\",href:\"#regex-nlu\",children:(0,e.jsx)(n.span,{className:\"icon icon-link\"})}),\"Regex NLU\"]}),`\n`,(0,e.jsx)(n.pre,{children:(0,e.jsxs)(n.code,{className:\"code-highlight\",children:[(0,e.jsx)(n.span,{className:\"code-line\",children:`myRegex:\n`}),(0,e.jsx)(n.span,{className:\"code-line\",children:`\t type: regex\n`}),(0,e.jsx)(n.span,{className:\"code-line\",children:`\t options:\n`}),(0,e.jsx)(n.span,{className:\"code-line\",children:`\t\tregex: <regex as string>\n`}),(0,e.jsx)(n.span,{className:\"code-line\",children:`\t\tindex: number # optional\n`})]})}),`\n`,(0,e.jsx)(n.p,{children:\"or\"}),`\n`,(0,e.jsx)(n.pre,{children:(0,e.jsxs)(n.code,{className:\"code-highlight\",children:[(0,e.jsx)(n.span,{className:\"code-line\",children:`myRegex:\n`}),(0,e.jsx)(n.span,{className:\"code-line\",children:`\ttype: regex\n`}),(0,e.jsx)(n.span,{className:\"code-line\",children:`\toptions:\n`}),(0,e.jsx)(n.span,{className:\"code-line\",children:`\t\tregex: <regex as string>\n`}),(0,e.jsx)(n.span,{className:\"code-line\",children:`\t\tindex:\n`}),(0,e.jsx)(n.span,{className:\"code-line\",children:`\t\t<key>: number\n`})]})}),`\n`,(0,e.jsx)(n.p,{children:\"or\"}),`\n`,(0,e.jsx)(n.pre,{children:(0,e.jsxs)(n.code,{className:\"code-highlight\",children:[(0,e.jsx)(n.span,{className:\"code-line\",children:`myRegex:\n`}),(0,e.jsx)(n.span,{className:\"code-line\",children:`\t type: regex\n`}),(0,e.jsx)(n.span,{className:\"code-line\",children:`\t options:\n`}),(0,e.jsx)(n.span,{className:\"code-line\",children:`\t\tregex:\n`}),(0,e.jsx)(n.span,{className:\"code-line\",children:`\t\t <key>: <regex as string>\n`})]})}),`\n`,(0,e.jsx)(n.p,{children:\"Example with index:\"}),`\n`,(0,e.jsx)(n.pre,{children:(0,e.jsxs)(n.code,{className:\"code-highlight\",children:[(0,e.jsx)(n.span,{className:\"code-line\",children:`nlus:\n`}),(0,e.jsx)(n.span,{className:\"code-line\",children:`\t nameNLU:\n`}),(0,e.jsx)(n.span,{className:\"code-line\",children:`\t\ttype: regex\n`}),(0,e.jsx)(n.span,{className:\"code-line\",children:`\t\toptions:\n`}),(0,e.jsx)(n.span,{className:\"code-line\",children:`\t\t  regex: 'nama saya (.+)'\n`}),(0,e.jsx)(n.span,{className:\"code-line\",children:`\t\t  index: 1\n`}),(0,e.jsx)(n.span,{className:\"code-line\",children:`\n`}),(0,e.jsx)(n.span,{className:\"code-line\",children:`## usage in intent\n`}),(0,e.jsx)(n.span,{className:\"code-line\",children:`intents:\n`}),(0,e.jsx)(n.span,{className:\"code-line\",children:`\t giveName:\n`}),(0,e.jsx)(n.span,{className:\"code-line\",children:`\t\tattributes:\n`}),(0,e.jsx)(n.span,{className:\"code-line\",children:`\t\t  name:\n`}),(0,e.jsx)(n.span,{className:\"code-line\",children:`\t\t  nlu: nameNLU\n`})]})}),`\n`,(0,e.jsx)(n.p,{children:\"Example with multiple index:\"}),`\n`,(0,e.jsx)(n.pre,{children:(0,e.jsxs)(n.code,{className:\"code-highlight\",children:[(0,e.jsx)(n.span,{className:\"code-line\",children:`nlus:\n`}),(0,e.jsx)(n.span,{className:\"code-line\",children:`\t nameNLU:\n`}),(0,e.jsx)(n.span,{className:\"code-line\",children:`\t\ttype: regex\n`}),(0,e.jsx)(n.span,{className:\"code-line\",children:`\t\toptions:\n`}),(0,e.jsx)(n.span,{className:\"code-line\",children:`\t\t  regex: 'nama (saya|kamu) (.+)'\n`}),(0,e.jsx)(n.span,{className:\"code-line\",children:`\t\t  index:\n`}),(0,e.jsx)(n.span,{className:\"code-line\",children:`\t\t  who: 1\n`}),(0,e.jsx)(n.span,{className:\"code-line\",children:`\t\t  name: 2\n`}),(0,e.jsx)(n.span,{className:\"code-line\",children:`\n`}),(0,e.jsx)(n.span,{className:\"code-line\",children:`## usage in intent\n`}),(0,e.jsx)(n.span,{className:\"code-line\",children:`intents:\n`}),(0,e.jsx)(n.span,{className:\"code-line\",children:`\t giveName:\n`}),(0,e.jsx)(n.span,{className:\"code-line\",children:`\t\tattributes:\n`}),(0,e.jsx)(n.span,{className:\"code-line\",children:`\t\t  name:\n`}),(0,e.jsx)(n.span,{className:\"code-line\",children:`\t\t  nlu: nameNLU\n`}),(0,e.jsx)(n.span,{className:\"code-line\",children:`\t\t  path: who\n`}),(0,e.jsx)(n.span,{className:\"code-line\",children:`\t\t  who:\n`}),(0,e.jsx)(n.span,{className:\"code-line\",children:`\t\t  nlu: nameNLU\n`}),(0,e.jsx)(n.span,{className:\"code-line\",children:`\t\t  path: name\n`})]})}),`\n`,(0,e.jsx)(n.p,{children:\"Example with multiple regex:\"}),`\n`,(0,e.jsx)(n.pre,{children:(0,e.jsxs)(n.code,{className:\"code-highlight\",children:[(0,e.jsx)(n.span,{className:\"code-line\",children:`nlus:\n`}),(0,e.jsx)(n.span,{className:\"code-line\",children:`\t regexNlu:\n`}),(0,e.jsx)(n.span,{className:\"code-line\",children:`\ttype: regex\n`}),(0,e.jsx)(n.span,{className:\"code-line\",children:`\toptions:\n`}),(0,e.jsx)(n.span,{className:\"code-line\",children:`\t\t  regex:\n`}),(0,e.jsx)(n.span,{className:\"code-line\",children:`\t\t  name: 'nama saya (.+)'\n`}),(0,e.jsx)(n.span,{className:\"code-line\",children:`\t\t  email: 'w+@w+.w+'\n`}),(0,e.jsx)(n.span,{className:\"code-line\",children:`\n`}),(0,e.jsx)(n.span,{className:\"code-line\",children:`## usage in intent\n`}),(0,e.jsx)(n.span,{className:\"code-line\",children:`intents:\n`}),(0,e.jsx)(n.span,{className:\"code-line\",children:`\t giveName:\n`}),(0,e.jsx)(n.span,{className:\"code-line\",children:`\t\tattributes:\n`}),(0,e.jsx)(n.span,{className:\"code-line\",children:`\t\t  name:\n`}),(0,e.jsx)(n.span,{className:\"code-line\",children:`\t\t  nlu: regexNlu\n`}),(0,e.jsx)(n.span,{className:\"code-line\",children:`\t\t  path: name\n`}),(0,e.jsx)(n.span,{className:\"code-line\",children:`\t\t  who:\n`}),(0,e.jsx)(n.span,{className:\"code-line\",children:`\t\t  nlu: regexNLU\n`}),(0,e.jsx)(n.span,{className:\"code-line\",children:`\t\t  path: email\n`})]})}),`\n`,(0,e.jsxs)(n.h3,{id:\"nl-studio-nlu\",children:[(0,e.jsx)(n.a,{className:\"anchor\",href:\"#nl-studio-nlu\",children:(0,e.jsx)(n.span,{className:\"icon icon-link\"})}),\"NL Studio NLU\"]}),`\n`,(0,e.jsx)(n.pre,{children:(0,e.jsxs)(n.code,{className:\"code-highlight\",children:[(0,e.jsx)(n.span,{className:\"code-line\",children:`mynl:\n`}),(0,e.jsx)(n.span,{className:\"code-line\",children:`\t type: nl\n`}),(0,e.jsx)(n.span,{className:\"code-line\",children:`\t options:\n`}),(0,e.jsx)(n.span,{className:\"code-line\",children:`\t\tnluId: <nluId>\n`}),(0,e.jsx)(n.span,{className:\"code-line\",children:`\t\ttoken: <nluToken>\n`}),(0,e.jsx)(n.span,{className:\"code-line\",children:`\t\toutput:\n`}),(0,e.jsx)(n.span,{className:\"code-line\",children:`\t\t  <type>\n`}),(0,e.jsx)(n.span,{className:\"code-line\",children:`\t\t  # raw - return the raw prediction result from NL Studio\n`}),(0,e.jsx)(n.span,{className:\"code-line\",children:`\t\t  # value - return the value of each NLU's entity\n`}),(0,e.jsx)(n.span,{className:\"code-line\",children:`\t\t  # phrase - only for NL Studio entity type 'phrase'\n`}),(0,e.jsx)(n.span,{className:\"code-line\",children:`\t\tentity: <entityName> # only for output: phrase\n`}),(0,e.jsx)(n.span,{className:\"code-line\",children:`\t\tthreshold: <number> # confidence rate, if less than treshold bot wouldn't recognize as this intent\n`}),(0,e.jsx)(n.span,{className:\"code-line\",children:`\t\tflatten: true # optional, default false\n`})]})}),`\n`,(0,e.jsx)(n.p,{children:\"Examples:\"}),`\n`,(0,e.jsx)(n.pre,{children:(0,e.jsxs)(n.code,{className:\"code-highlight\",children:[(0,e.jsx)(n.span,{className:\"code-line\",children:`## usage in intent for output type value\n`}),(0,e.jsx)(n.span,{className:\"code-line\",children:`nlus:\n`}),(0,e.jsx)(n.span,{className:\"code-line\",children:`\t mynl:\n`}),(0,e.jsx)(n.span,{className:\"code-line\",children:`\t\ttype: nl\n`}),(0,e.jsx)(n.span,{className:\"code-line\",children:`\t\toptions:\n`}),(0,e.jsx)(n.span,{className:\"code-line\",children:`\t\t  nluId: <nluId>\n`}),(0,e.jsx)(n.span,{className:\"code-line\",children:`\t\t  output: value\n`}),(0,e.jsx)(n.span,{className:\"code-line\",children:`\t\t  threshold: 0.5\n`}),(0,e.jsx)(n.span,{className:\"code-line\",children:`\t\t  flatten: true\n`}),(0,e.jsx)(n.span,{className:\"code-line\",children:`\n`}),(0,e.jsx)(n.span,{className:\"code-line\",children:`intents:\n`}),(0,e.jsx)(n.span,{className:\"code-line\",children:`\t yes:\n`}),(0,e.jsx)(n.span,{className:\"code-line\",children:`\t\tclassifier:\n`}),(0,e.jsx)(n.span,{className:\"code-line\",children:`\t\t  nlu: mynl\n`}),(0,e.jsx)(n.span,{className:\"code-line\",children:`\t\t  expression: \"intent == 'yes'\" # <entityName> == <label> of entity type 'trait'\n`}),(0,e.jsx)(n.span,{className:\"code-line\",children:`\t name:\n`}),(0,e.jsx)(n.span,{className:\"code-line\",children:`\t\tclassifier:\n`}),(0,e.jsx)(n.span,{className:\"code-line\",children:`\t\t  nlu: mynl\n`}),(0,e.jsx)(n.span,{className:\"code-line\",children:`\t\t  expression: ner # <entityName> of entity type 'phrase'\n`}),(0,e.jsx)(n.span,{className:\"code-line\",children:`\t\tattributes:\n`}),(0,e.jsx)(n.span,{className:\"code-line\",children:`\t\t  person:\n`}),(0,e.jsx)(n.span,{className:\"code-line\",children:`\t\t  nlu: mynl\n`}),(0,e.jsx)(n.span,{className:\"code-line\",children:`\t\t  path: ner # <entityName>\n`}),(0,e.jsx)(n.span,{className:\"code-line\",children:`\n`}),(0,e.jsx)(n.span,{className:\"code-line\",children:`## usage in intent for output type phrase\n`}),(0,e.jsx)(n.span,{className:\"code-line\",children:`nlus:\n`}),(0,e.jsx)(n.span,{className:\"code-line\",children:`\t mynl2:\n`}),(0,e.jsx)(n.span,{className:\"code-line\",children:`\t\ttype: nl\n`}),(0,e.jsx)(n.span,{className:\"code-line\",children:`\t\toptions:\n`}),(0,e.jsx)(n.span,{className:\"code-line\",children:`\t\t  nluId: <nluId>\n`}),(0,e.jsx)(n.span,{className:\"code-line\",children:`\t\t  output: phrase\n`}),(0,e.jsx)(n.span,{className:\"code-line\",children:`\t\t  entity: <entityName>\n`}),(0,e.jsx)(n.span,{className:\"code-line\",children:`\t\t  threshold: 0.7\n`}),(0,e.jsx)(n.span,{className:\"code-line\",children:`\n`}),(0,e.jsx)(n.span,{className:\"code-line\",children:`intents:\n`}),(0,e.jsx)(n.span,{className:\"code-line\",children:`\tcredentials:\n`}),(0,e.jsx)(n.span,{className:\"code-line\",children:`\t\tclassifier:\n`}),(0,e.jsx)(n.span,{className:\"code-line\",children:`\t\t  nlu: mynl # use the previous bot's nlu\n`}),(0,e.jsx)(n.span,{className:\"code-line\",children:`\t\t  expression: \"intent == 'giveCredentials'\"\n`}),(0,e.jsx)(n.span,{className:\"code-line\",children:`\t\tattributes:\n`}),(0,e.jsx)(n.span,{className:\"code-line\",children:`\t\t  person:\n`}),(0,e.jsx)(n.span,{className:\"code-line\",children:`\t\t  nlu: mynl2\n`}),(0,e.jsx)(n.span,{className:\"code-line\",children:`\t\t  path: person \\xA0 # <label> of mynl2's entity <enityName>\n`}),(0,e.jsx)(n.span,{className:\"code-line\",children:`\t\t  location:\n`}),(0,e.jsx)(n.span,{className:\"code-line\",children:`\t\t  nlu: mynl2\n`}),(0,e.jsx)(n.span,{className:\"code-line\",children:`\t\t  path: location # <label> of mynl2's entity <enityName>\n`}),(0,e.jsx)(n.span,{className:\"code-line\",children:`\t\t name:\n`}),(0,e.jsx)(n.span,{className:\"code-line\",children:`\t\tclassifier:\n`}),(0,e.jsx)(n.span,{className:\"code-line\",children:`\t\t  nlu: mynl2\n`}),(0,e.jsx)(n.span,{className:\"code-line\",children:`\t\t  expression: person # <label> of mynl2's entity <enityName>\n`}),(0,e.jsx)(n.span,{className:\"code-line\",children:`\t\tattributes:\n`}),(0,e.jsx)(n.span,{className:\"code-line\",children:`\t\t  person:\n`}),(0,e.jsx)(n.span,{className:\"code-line\",children:`\t\t  nlu: mynl2\n`}),(0,e.jsx)(n.span,{className:\"code-line\",children:`\t\t  path: person # <label>\n`}),(0,e.jsx)(n.span,{className:\"code-line\",children:`\n`}),(0,e.jsx)(n.span,{className:\"code-line\",children:`# alternative approach\n`}),(0,e.jsx)(n.span,{className:\"code-line\",children:`nlus:\n`}),(0,e.jsx)(n.span,{className:\"code-line\",children:`\tmynl3:\n`}),(0,e.jsx)(n.span,{className:\"code-line\",children:`\t\ttype: nl\n`}),(0,e.jsx)(n.span,{className:\"code-line\",children:`\t\toptions:\n`}),(0,e.jsx)(n.span,{className:\"code-line\",children:`\t\tnluId: <nluId>\n`}),(0,e.jsx)(n.span,{className:\"code-line\",children:`\n`}),(0,e.jsx)(n.span,{className:\"code-line\",children:`intents:\n`}),(0,e.jsx)(n.span,{className:\"code-line\",children:`\t yes:\n`}),(0,e.jsx)(n.span,{className:\"code-line\",children:`\t\tclassifier:\n`}),(0,e.jsx)(n.span,{className:\"code-line\",children:`\t\t  nlu: mynl3\n`}),(0,e.jsx)(n.span,{className:\"code-line\",children:`\t\t  options:\n`}),(0,e.jsx)(n.span,{className:\"code-line\",children:`\t\t  output: value\n`}),(0,e.jsx)(n.span,{className:\"code-line\",children:`\t\t  threshold: 0.5\n`}),(0,e.jsx)(n.span,{className:\"code-line\",children:`\t\t  flatten: true\n`}),(0,e.jsx)(n.span,{className:\"code-line\",children:`\t\t  expression: \"intent == 'yes'\"\n`}),(0,e.jsx)(n.span,{className:\"code-line\",children:`\t\tattributes:\n`}),(0,e.jsx)(n.span,{className:\"code-line\",children:`\t\t  person:\n`}),(0,e.jsx)(n.span,{className:\"code-line\",children:`\t\t  nlu: mynl3\n`}),(0,e.jsx)(n.span,{className:\"code-line\",children:`\t\t  path: person\n`}),(0,e.jsx)(n.span,{className:\"code-line\",children:`\t\t  options:\n`}),(0,e.jsx)(n.span,{className:\"code-line\",children:`\t\t\t  output: phrase\n`}),(0,e.jsx)(n.span,{className:\"code-line\",children:`\t\t\t  entity: ner\n`}),(0,e.jsx)(n.span,{className:\"code-line\",children:`\t\t\t  threshold: 0.7\n`})]})}),`\n`,(0,e.jsxs)(n.h2,{id:\"method\",children:[(0,e.jsx)(n.a,{className:\"anchor\",href:\"#method\",children:(0,e.jsx)(n.span,{className:\"icon icon-link\"})}),\"Method\"]}),`\n`,(0,e.jsxs)(n.h3,{id:\"inline-method\",children:[(0,e.jsx)(n.a,{className:\"anchor\",href:\"#inline-method\",children:(0,e.jsx)(n.span,{className:\"icon icon-link\"})}),\"Inline Method\"]}),`\n`,(0,e.jsx)(n.p,{children:\"Example:\"}),`\n`,(0,e.jsx)(n.pre,{children:(0,e.jsxs)(n.code,{className:\"code-highlight\",children:[(0,e.jsx)(n.span,{className:\"code-line\",children:`methods:\n`}),(0,e.jsx)(n.span,{className:\"code-line\",children:`\tsomeMethod(x): \"\n`}),(0,e.jsx)(n.span,{className:\"code-line\",children:`\t  return x*x;\n`}),(0,e.jsx)(n.span,{className:\"code-line\",children:`\t\"\n`})]})}),`\n`,(0,e.jsxs)(n.h3,{id:\"method-from-file\",children:[(0,e.jsx)(n.a,{className:\"anchor\",href:\"#method-from-file\",children:(0,e.jsx)(n.span,{className:\"icon icon-link\"})}),\"Method from File\"]}),`\n`,(0,e.jsx)(n.p,{children:\"Example:\"}),`\n`,(0,e.jsx)(n.pre,{children:(0,e.jsxs)(n.code,{className:\"code-highlight\",children:[(0,e.jsx)(n.span,{className:\"code-line\",children:`method:\n`}),(0,e.jsx)(n.span,{className:\"code-line\",children:`\t otherMethod(x):\n`}),(0,e.jsx)(n.span,{className:\"code-line\",children:`\t\tcode: $include(./some/code.js)\n`}),(0,e.jsx)(n.span,{className:\"code-line\",children:`\t\tentry: module.exports\n`}),(0,e.jsx)(n.span,{className:\"code-line\",children:`\n`}),(0,e.jsx)(n.span,{className:\"code-line\",children:`// ./some/code.js\n`}),(0,e.jsx)(n.span,{className:\"code-line\",children:`\n`}),(0,e.jsx)(n.span,{className:\"code-line\",children:`function otherMethod(x) {\n`}),(0,e.jsx)(n.span,{className:\"code-line\",children:`\t return x * x;\n`}),(0,e.jsx)(n.span,{className:\"code-line\",children:`}\n`}),(0,e.jsx)(n.span,{className:\"code-line\",children:`module.exports = otherMethod;\n`})]})})]})}}var v=x;return y(k);})();\n;return Component;"},"_id":"kata-platform/how-to/how-to-use-kataml-to-build-your-chatbot.mdx","_raw":{"sourceFilePath":"kata-platform/how-to/how-to-use-kataml-to-build-your-chatbot.mdx","sourceFileName":"how-to-use-kataml-to-build-your-chatbot.mdx","sourceFileDir":"kata-platform/how-to","contentType":"mdx","flattenedPath":"kata-platform/how-to/how-to-use-kataml-to-build-your-chatbot"},"type":"KataPlatform","slug":["how-to","how-to-use-kataml-to-build-your-chatbot"],"excerpt":"\nKata ML is a descriptive YAML-based language for defining bots. The entry-point of KataML-based bot is the bot"},"linking":null},"__N_SSG":true}