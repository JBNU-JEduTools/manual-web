{"pageProps":{"post":{"layout":"tutorial","id":"bot-studio","imgSpot":"/assets/images/tutorials/spot-cms.webp","product":"kata-platform","title":"Bot Studio Tutorial","date":"2018-07-07T07:00:00+07:00","prev":"hello-world-tutorial","next":"nl-studio-tutorial","body":{"raw":"\n## Introduction\n\nBuilding a chatbot on Kata | Platform is quick and easy, even with a lack of programming knowledge. In this tutorial, we will learn how to create a simple bot on LINE Messenger to order a pizza. We will also learn how to train your bot with NL Studio.\n\nLet's start by looking at this bot diagram, or commonly called “conversation tree.” Conversation tree is an overview of chatbot functionalities. In this conversation tree, we break down the process of ordering pizza and the types of bot action we want to use on each state.\n\n<FigureImage\n  src=\"/assets/images/tutorials/bot-studio/bse-1.webp\"\n  alt=\"bse-1\"\n  naturalHeight={1040}\n  naturalWidth={1040}\n/>\n\n## Sign up to Kata | Platform\n\nCreate an account on Kata | Platform to start building chatbot.\n\nOn your browser, open <a href=\"https://platform.kata.ai/login\" target=\"_blank\">https://platform.kata.ai/login</a> and click “Sign Up”\n\n<FigureImage src=\"/assets/images/tutorials/bot-studio/bse-2.webp\" alt=\"bse-2\" naturalHeight={1016} naturalWidth={870} />\n\nThen fill the form with a username, an email, and an account type. Continue by clicking \"Sign Up.\"\n\n<FigureImage src=\"/assets/images/tutorials/bot-studio/bse-3.webp\" alt=\"bse-3\" naturalHeight={1238} naturalWidth={872} />\n\nYou will get a confirmation email once our team has verified your account.\n\nYou may follow the instructions provided in the confirmation email to activate and start using your account.\n\n## Create a Project\n\n### Login to Kata | Platform\n\nOn your browser, open <a href=\"https://platform.kata.ai/login\" target=\"_blank\">platform.kata.ai/login</a> and enter your username & password.\n\n<FigureImage src=\"/assets/images/tutorials/bot-studio/bse-4.webp\" alt=\"bse-4\" naturalHeight={1050} naturalWidth={878} />\n\nClick \"Login\" to continue.\n\n### Create a project\n\nAfter you logged in, you will be taken to the Project Page.\n\n<FigureImage\n  src=\"/assets/images/tutorials/bot-studio/bse-5.webp\"\n  alt=\"bse-5\"\n  naturalHeight={1046}\n  naturalWidth={2896}\n/>\n\nClick on “Create Project” and fill in the form. Each project contains one bot design, one NL, and one CMS.\n\n<FigureImage src=\"/assets/images/tutorials/bot-studio/bse-6.webp\" alt=\"bse-6\" naturalHeight={1152} naturalWidth={842} />\n\nNLU language is used to determine which language model you want to use. Currently, we support Bahasa Indonesia and English.\n\nYou can also choose NLU Visibility to be public or private. If you choose public, **all Kata | Platform users** can utilize your NLU using root and inherit function.\n\n## Create Fallback Flow\n\n### Create fallback flow\n\nOnce you create a project, you will be redirected to the Bot Studio menu.\n\nNow we are going to learn how to create a flow. Flow is a container of **intent, state, and action**. A flow typically represents a linear process.\n\nThe first flow that we will create is a Fallback Flow. Its purpose is to handle undefined users input, or commonly called “else condition” state. In this case, the “else condition” is everything that is not “Start Order”.\n\n<FigureImage\n  src=\"/assets/images/tutorials/bot-studio/bse-1.webp\"\n  alt=\"bse-1\"\n  naturalHeight={1040}\n  naturalWidth={1040}\n/>\n\nYou may find a flow that is created automatically by the system or default flow. We will delete that flow by pressing more button and then “Delete.”\n\n<FigureImage\n  src=\"/assets/images/tutorials/bot-studio/bse-8.webp\"\n  alt=\"bse-8\"\n  naturalHeight={1008}\n  naturalWidth={1762}\n/>\n\nNext, click “Create Flow” button to create `fallback` flow. Set flow to active, persistent, and default.\n\n<FigureImage src=\"/assets/images/tutorials/bot-studio/bse-9.webp\" alt=\"bse-9\" naturalHeight={780} naturalWidth={846} />\n\n### Create fallback intent\n\nAfter you have created `fallback` flow, we will create new intent by pressing the Intents tab on the sub-menu. Then, we will create a new intent for `fallback` flow. Click “Create Intent” button to create.\n\n<FigureImage\n  src=\"/assets/images/tutorials/bot-studio/bse-10.webp\"\n  alt=\"bse-10\"\n  naturalHeight={674}\n  naturalWidth={1960}\n/>\n\nThen, fill in the form as follows\n\n<FigureImage\n  src=\"/assets/images/tutorials/bot-studio/bse-11.webp\"\n  alt=\"bse-11\"\n  naturalHeight={808}\n  naturalWidth={892}\n/>\n\n### Create State init\n\nNext, we will create a state called `init`. Click the ”+” button at the bottom right of your screen.\n\n<FigureImage\n  src=\"/assets/images/tutorials/bot-studio/bse-12.webp\"\n  alt=\"bse-12\"\n  naturalHeight={1722}\n  naturalWidth={3342}\n/>\n\nFill state with name `init` on Overview tab and set it to initial state and end state (as shown below).\n\nEnabling Initial State and End State will make `init` the first and the last flow to be checked by the bot when there isn't any flow that matches a user's input.\n\n<FigureImage\n  src=\"/assets/images/tutorials/bot-studio/bse-13.webp\"\n  alt=\"bse-13\"\n  naturalHeight={734}\n  naturalWidth={910}\n/>\n\nNow we will create a bot response to display an apology message. Click “Add actions” button to create a response.\n\n<FigureImage\n  src=\"/assets/images/tutorials/bot-studio/bse-14.webp\"\n  alt=\"bse-14\"\n  naturalHeight={626}\n  naturalWidth={860}\n/>\n\nContainer for creating action will appear\n\n<FigureImage\n  src=\"/assets/images/tutorials/bot-studio/bse-15.webp\"\n  alt=\"bse-15\"\n  naturalHeight={1200}\n  naturalWidth={840}\n/>\n\n### Create Action Text in State init\n\nClick on “+” button to create a new action.\n\n<FigureImage\n  src=\"/assets/images/tutorials/bot-studio/bse-16.webp\"\n  alt=\"bse-16\"\n  naturalHeight={1110}\n  naturalWidth={870}\n/>\n\nChoose action type “Text”\n\n<FigureImage\n  src=\"/assets/images/tutorials/bot-studio/bse-17.webp\"\n  alt=\"bse-17\"\n  naturalHeight={1382}\n  naturalWidth={860}\n/>\n\nThen, fill in the form\n\n<FigureImage\n  src=\"/assets/images/tutorials/bot-studio/bse-18.webp\"\n  alt=\"bse-18\"\n  naturalHeight={1348}\n  naturalWidth={866}\n/>\n\nClick on “Create Action” button.\n\n<FigureImage\n  src=\"/assets/images/tutorials/bot-studio/bse-19.webp\"\n  alt=\"bse-19\"\n  naturalHeight={770}\n  naturalWidth={876}\n/>\n\n### Create Self Transition in State Init\n\nThe last step to finalize `fallback` flow is to create self-transition for `init` state. Self transition is required to avoid error when the next state is not available. Click on “Transitions” and enable Self Transition.\n\n<FigureImage\n  src=\"/assets/images/tutorials/bot-studio/bse-20.webp\"\n  alt=\"bse-20\"\n  naturalHeight={1202}\n  naturalWidth={866}\n/>\n\nClick “Create” button. Your screen should look like this\n\n<FigureImage\n  src=\"/assets/images/tutorials/bot-studio/bse-21.webp\"\n  alt=\"bse-21\"\n  naturalHeight={1018}\n  naturalWidth={1840}\n/>\n\n## Create Order Flow\n\nNext, we will create `Start Order` flow to handle pizza order.\n\n<FigureImage\n  src=\"/assets/images/tutorials/bot-studio/bse-1.webp\"\n  alt=\"bse-1\"\n  naturalHeight={1040}\n  naturalWidth={1040}\n/>\n\n### Create Flow Order\n\nFirst step is to create another flow called `order` .\n\n<FigureImage\n  src=\"/assets/images/tutorials/bot-studio/bse-22.webp\"\n  alt=\"bse-22\"\n  naturalHeight={1676}\n  naturalWidth={880}\n/>\n\nCreated flow will be shown like this\n\n<FigureImage\n  src=\"/assets/images/tutorials/bot-studio/bse-23.webp\"\n  alt=\"bse-23\"\n  naturalHeight={1098}\n  naturalWidth={1642}\n/>\n\n### Create Keyword NLUs for 'Order'\n\nIn this step, we will define the NLU (Natural Language Understanding) to trigger `order` flow. NLU is used to translate user inputs into data that machine can understand. There are many types of NLU, but the type that we will use in this particular flow is called `keyword`. To define the NLU, go to NLUs menu.\n\n<FigureImage\n  src=\"/assets/images/tutorials/bot-studio/bse-24.webp\"\n  alt=\"bse-24\"\n  naturalHeight={1114}\n  naturalWidth={1680}\n/>\n\nNext, click on “Create NLU”\n\n<FigureImage\n  src=\"/assets/images/tutorials/bot-studio/bse-25.webp\"\n  alt=\"bse-25\"\n  naturalHeight={1078}\n  naturalWidth={1986}\n/>\n\nChoose Keyword type and enter keywords that represents `order`, such as “order”, “pls order”, “order pza”.\n\n<FigureImage\n  src=\"/assets/images/tutorials/bot-studio/bse-26.webp\"\n  alt=\"bse-26\"\n  naturalHeight={1698}\n  naturalWidth={904}\n/>\n\nSuccessfully created NLU looks like this\n\n<FigureImage\n  src=\"/assets/images/tutorials/bot-studio/bse-27.webp\"\n  alt=\"bse-27\"\n  naturalHeight={1034}\n  naturalWidth={2464}\n/>\n\n### Create Intent for Order\n\nEach flow requires an `intent` to classify user's inquiry and trigger matching flow. So our next step is to set initial intent for `order` flow.\n\nGo back to Conversation Flow menu and click on `order` flow, then click on “Intents” tab.\n\n<FigureImage\n  src=\"/assets/images/tutorials/bot-studio/bse-28.webp\"\n  alt=\"bse-28\"\n  naturalHeight={1012}\n  naturalWidth={1922}\n/>\n\nPreviously, you already created keyword NLUs called `order`. We will set that keyword as intent in `order` flow. Map the NLU on classifier section.\n\n<FigureImage\n  src=\"/assets/images/tutorials/bot-studio/bse-29.webp\"\n  alt=\"bse-29\"\n  naturalHeight={1688}\n  naturalWidth={922}\n/>\n\nClick “Create” to create the intent. Your screen should look like this\n\n<FigureImage\n  src=\"/assets/images/tutorials/bot-studio/bse-30.webp\"\n  alt=\"bse-30\"\n  naturalHeight={1060}\n  naturalWidth={2564}\n/>\n\n### Create a State Named init\n\nEvery flow must have at least one state. Because we haven't created any state in `order` flow, we have to create one. Let's create a state called `init`.\n\n<FigureImage\n  src=\"/assets/images/tutorials/bot-studio/bse-31.webp\"\n  alt=\"bse-31\"\n  naturalHeight={1676}\n  naturalWidth={854}\n/>\n\nClick “Create” button to create initial state.\n\nNext, we will define how the bot will respond to user who entered `order` flow.\n\n## Create Action for Pizza Menu\n\nAs seen on the conversation tree below, the first message in `order` flow is “Show Pizza Type”\n\n<FigureImage\n  src=\"/assets/images/tutorials/bot-studio/bse-1.webp\"\n  alt=\"bse-1\"\n  naturalHeight={1040}\n  naturalWidth={1040}\n/>\n\n### Create a State to Show Pizza type in Text Action Type\n\nTo get started, we need to create a state named `showPizza` on `order` flow. Click on “+” button in Conversation Flow menu.\n\n<FigureImage\n  src=\"/assets/images/tutorials/bot-studio/bse-33.webp\"\n  alt=\"bse-33\"\n  naturalHeight={1304}\n  naturalWidth={854}\n/>\n\nLet's begin by creating an action called `pizzaOptions`. This action will inform users in **text about our available pizza menu**.\n\nClick on “+” button to create an action and choose Text as action type.\n\n<FigureImage\n  src=\"/assets/images/tutorials/bot-studio/bse-34.webp\"\n  alt=\"bse-34\"\n  naturalHeight={1540}\n  naturalWidth={850}\n/>\n\nFill in Text action type to inform our pizza menu\n\n<FigureImage\n  src=\"/assets/images/tutorials/bot-studio/bse-35.webp\"\n  alt=\"bse-35\"\n  naturalHeight={917}\n  naturalWidth={792}\n/>\n\nClick on “Create Action” to finalize. Next step is to create an action called `askOptions`\n\n<FigureImage\n  src=\"/assets/images/tutorials/bot-studio/bse-36.webp\"\n  alt=\"bse-36\"\n  naturalHeight={924}\n  naturalWidth={792}\n/>\n\nClick on “Create Action” button. Your form should look like this\n\n<FigureImage\n  src=\"/assets/images/tutorials/bot-studio/bse-37.webp\"\n  alt=\"bse-37\"\n  naturalHeight={886}\n  naturalWidth={864}\n/>\n\nThen you have to make self-transition in Transition tab as follow\n\n<FigureImage\n  src=\"/assets/images/tutorials/bot-studio/bse-37-1.webp\"\n  alt=\"bse-37-1\"\n  naturalHeight={920}\n  naturalWidth={1308}\n/>\n\nClick “Create” to create the state. Successfully created state will look like this\n\n<FigureImage\n  src=\"/assets/images/tutorials/bot-studio/bse-38.webp\"\n  alt=\"bse-38\"\n  naturalHeight={1042}\n  naturalWidth={2014}\n/>\n\n### Update showPizza state Into Show Pizza Menu in Carousel Action Type\n\nPrevious step is an example to create action to **show pizza menu in text.** Let's try to update the state into Carousel action type.\n\nTo update the state, click on `showPizza` state and an update state form will appear\n\n<FigureImage\n  src=\"/assets/images/tutorials/bot-studio/bse-39.webp\"\n  alt=\"bse-39\"\n  naturalHeight={1732}\n  naturalWidth={1008}\n/>\n\nThen, remove all actions in the state by clicking “x” on each action.\n\n<FigureImage\n  src=\"/assets/images/tutorials/bot-studio/bse-40.webp\"\n  alt=\"bse-40\"\n  naturalHeight={918}\n  naturalWidth={832}\n/>\n\nAfter removing available actions, we will create an action called `pizzaMenu` as Carousel action type.\n\nClick on “Add” actions button then click on “+” button to create a new action. Choose Carousel action type to continue.\n\n<FigureImage\n  src=\"/assets/images/tutorials/bot-studio/bse-41.webp\"\n  alt=\"bse-41\"\n  naturalHeight={1142}\n  naturalWidth={836}\n/>\n\nEnter `pizzaMenu` as name\n\n<FigureImage\n  src=\"/assets/images/tutorials/bot-studio/bse-42.webp\"\n  alt=\"bse-42\"\n  naturalHeight={474}\n  naturalWidth={826}\n/>\n\nFill in the carousel content by clicking “Add carousel” button, then click on “Add action” button to define the **label and type**. Next, click on Add Payload button to enter **key and value**.\n\nFill in first carousel with this data\n\n```\nTitle: Pepperoni\nText: This is the favorite of Peps\nThumbnail Image Url: https://www.wikihow.com/images/thumb/a/a7/Make-Pepperoni-Pizza-Step-19-Version-2.jpg/aid1074004-v4-728px-Make-Pepperoni-Pizza-Step-19-Version-2.jpg.webp\nActions:\n  Label: Pepperoni\n  Type: Postback\n  Payload:\n    - key: type\n      value: pizza\n    - key: pizza\n      value: Pepperoni\n```\n\nFill in second carousel with this data\n\n```\nTitle: Veggie Lovers\nText: Vegie vegie stay healthy\nThumbnail Image Url: https://www.calcuttaweb.com/store/image/data/calcutta/pizza/veggie-lovers-pizza-pihu-7.jpg\nActions:\n  Label: Veggie Lovers\n  Type: Postback\n  Payload:\n    - key: type\n      value: pizza\n    - key: pizza\n      value: Veggie Lovers\n```\n\nYour first form should look like this\n\n<FigureImage\n  src=\"/assets/images/tutorials/bot-studio/bse-43.webp\"\n  alt=\"bse-43\"\n  naturalHeight={1336}\n  naturalWidth={752}\n/>\n\nYour second form should look like this\n\n<FigureImage\n  src=\"/assets/images/tutorials/bot-studio/bse-44.webp\"\n  alt=\"bse-44\"\n  naturalHeight={1332}\n  naturalWidth={744}\n/>\n\nFinalize this step by clicking “Create Action.”\n\nIt should look like this\n\n<FigureImage\n  src=\"/assets/images/tutorials/bot-studio/bse-45.webp\"\n  alt=\"bse-45\"\n  naturalHeight={926}\n  naturalWidth={842}\n/>\n\nOnce the bot displays a carousel containing the type for pizza menu, its next step is to ask user to select the pizza. Click “Add actions” button to trigger drop-down list, then choose `askOptions`\n\n<FigureImage\n  src=\"/assets/images/tutorials/bot-studio/bse-46.webp\"\n  alt=\"bse-46\"\n  naturalHeight={1290}\n  naturalWidth={846}\n/>\n\nAfter you select `askOptions` action click “Create Action” button to finalize this step.\n\n<FigureImage\n  src=\"/assets/images/tutorials/bot-studio/bse-47.webp\"\n  alt=\"bse-47\"\n  naturalHeight={1506}\n  naturalWidth={848}\n/>\n\nYour form should look like this\n\n<FigureImage\n  src=\"/assets/images/tutorials/bot-studio/bse-48.webp\"\n  alt=\"bse-48\"\n  naturalHeight={1704}\n  naturalWidth={850}\n/>\n\nClick “Update” to update the state.\n\n### Create Intent to Choose A Pizza\n\nNow we have to create an intent called `pizzaChosen` to handle user's input after they have selected a pizza type. Click on Intent menu in `order` flow.\n\n<FigureImage\n  src=\"/assets/images/tutorials/bot-studio/bse-49.webp\"\n  alt=\"bse-49\"\n  naturalHeight={1288}\n  naturalWidth={2716}\n/>\n\nClick on Create Intent and create intent as follow\n\n<FigureImage\n  src=\"/assets/images/tutorials/bot-studio/bse-50.webp\"\n  alt=\"bse-50\"\n  naturalHeight={1076}\n  naturalWidth={854}\n/>\n\nSuccessfully created intent looks like this\n\n<FigureImage\n  src=\"/assets/images/tutorials/bot-studio/bse-51.webp\"\n  alt=\"bse-51\"\n  naturalHeight={1074}\n  naturalWidth={3330}\n/>\n\n### Create Transition between init and showPizza\n\nNow, we will create a transition between two states that we have created before.\n\nClick the green dot on `init` state, and a connector line will appear. Connect that line to `showPizza` state. If you do it right, a Create Transition form will appear.\n\n<FigureImage\n  src=\"/assets/images/tutorials/bot-studio/bse-52.webp\"\n  alt=\"bse-52\"\n  naturalHeight={888}\n  naturalWidth={1693}\n/>\n\nFill in the form with these data, and click “Create”\n\n<FigureImage\n  src=\"/assets/images/tutorials/bot-studio/bse-52-1.webp\"\n  alt=\"bse-52-1\"\n  naturalHeight={1278}\n  naturalWidth={2766}\n/>\n\n### Create 'reenter' intent\n\nNext, we will add `reenter` intent so the bot can return to its previous state after triggering fallback state. Create the intent in `order` flow.\n\n<FigureImage\n  src=\"/assets/images/tutorials/bot-studio/bse-53.webp\"\n  alt=\"bse-53\"\n  naturalHeight={1128}\n  naturalWidth={2802}\n/>\n\n## Create Action for Asking Pizza Quantity\n\nIn this step we will learn how to create “Ask quantity” state.\n\n<FigureImage\n  src=\"/assets/images/tutorials/bot-studio/bse-1.webp\"\n  alt=\"bse-1\"\n  naturalHeight={1040}\n  naturalWidth={1040}\n/>\n\n### Create pizzaQuantity state\n\nIn this step we will create `pizzaQuantity` state to handle order quantity. The type of action we will use is in this state is Text. Click on “+” button on `order` flow and fill the form as follows\n\n<FigureImage\n  src=\"/assets/images/tutorials/bot-studio/bse-54.webp\"\n  alt=\"bse-54\"\n  naturalHeight={1418}\n  naturalWidth={786}\n/>\n\nThen you have to make self-transition in Transition tab as follow\n\n<FigureImage\n  src=\"/assets/images/tutorials/bot-studio/bse-54_1.webp\"\n  alt=\"bse-54_1\"\n  naturalHeight={920}\n  naturalWidth={1308}\n/>\n\nResult:\n\n<FigureImage\n  src=\"/assets/images/tutorials/bot-studio/bse-55.webp\"\n  alt=\"bse-55\"\n  naturalHeight={1114}\n  naturalWidth={1986}\n/>\n\n### Create NLUs quantity\n\nAfterwards, we have to handle user's input with NLUs. Because we only allowed number from 1 to 9, we will create a limitation in regex format. Click on Create NLUs and follow this screenshot\n\n<FigureImage\n  src=\"/assets/images/tutorials/bot-studio/bse-56.webp\"\n  alt=\"bse-56\"\n  naturalHeight={1062}\n  naturalWidth={816}\n/>\n\nSuccessfully created NLU will be shown like this\n\n<FigureImage\n  src=\"/assets/images/tutorials/bot-studio/bse-57.webp\"\n  alt=\"bse-57\"\n  naturalHeight={870}\n  naturalWidth={3282}\n/>\n\n### Create Intent quantity\n\nAfter we created the NLU, we will add an intent to respond user's input. In `order` flow, click on Create Intent and fill in the form\n\n<FigureImage\n  src=\"/assets/images/tutorials/bot-studio/bse-58.webp\"\n  alt=\"bse-58\"\n  naturalHeight={1414}\n  naturalWidth={816}\n/>\n\nSuccessfully created intent will look like this\n\n<FigureImage\n  src=\"/assets/images/tutorials/bot-studio/bse-59.webp\"\n  alt=\"bse-59\"\n  naturalHeight={1104}\n  naturalWidth={3288}\n/>\n\n### Create Transition between showPizza and pizzaQuantity\n\nNow we have to create a transition between `showPizza`and `pizzaQuantity`. We will also store `payload.pizza` value into `context.pizza`. Click on the blue dot on `showPizza` and drag the line to `pizzaQuantity` state to create the transition. Create Transition form will appear after you have successfully connected the states.\n\n<FigureImage\n  src=\"/assets/images/tutorials/bot-studio/bse-60.webp\"\n  alt=\"bse-60\"\n  naturalHeight={1244}\n  naturalWidth={866}\n/>\n\nCreated transition will look like this\n\n<FigureImage\n  src=\"/assets/images/tutorials/bot-studio/bse-61.webp\"\n  alt=\"bse-61\"\n  naturalHeight={1082}\n  naturalWidth={2298}\n/>\n\n## Create Confirmation Action\n\nOur next step is creating `Ask confirmation` state.\n\n<FigureImage\n  src=\"/assets/images/tutorials/bot-studio/bse-1.webp\"\n  alt=\"bse-1\"\n  naturalHeight={1040}\n  naturalWidth={1040}\n/>\n\n### Create “YESNO” keyword NLUs\n\nFirst, we will create a keyword NLU to handle `yes` and `no`. Click on Create NLUs and fill in as follows\n\n<FigureImage\n  src=\"/assets/images/tutorials/bot-studio/bse-62.webp\"\n  alt=\"bse-62\"\n  naturalHeight={1512}\n  naturalWidth={832}\n/>\n\nSuccessfully created NLU will look like this\n\n<FigureImage\n  src=\"/assets/images/tutorials/bot-studio/bse-63.webp\"\n  alt=\"bse-63\"\n  naturalHeight={1164}\n  naturalWidth={3270}\n/>\n\n### Create confirmPizza state\n\nNow we will create `confirmPizza` state to handle order confirmation. We will also store chosen pizza & quantity information in this state. Select `order` flow and click on “+” button to create `confirmPizza` state.\n\n<FigureImage\n  src=\"/assets/images/tutorials/bot-studio/bse-64.webp\"\n  alt=\"bse-64\"\n  naturalHeight={1408}\n  naturalWidth={758}\n/>\n\n## Add mapping in onTransit tab\n\n<FigureImage\n  src=\"/assets/images/tutorials/bot-studio/bse-67.webp\"\n  alt=\"bse-67\"\n  naturalHeight={510}\n  naturalWidth={760}\n/>\n\nDon't forget to add self-transition in a state. Click Create Action. Your screen should look like this\n\n<FigureImage\n  src=\"/assets/images/tutorials/bot-studio/bse-65.webp\"\n  alt=\"bse-65\"\n  naturalHeight={1192}\n  naturalWidth={2330}\n/>\n\n### Create a transition from pizzaQuantity to confirmPizza\n\nWe will make a transition by storing value (mapping) from pizza quantity **and** chosen pizza type. Click the blue dot on `pizzaQuantity` and drag the line to `confirmPizza` state to create a transition. Create Transition form will appear after you successfully connected the states.\n\n<FigureImage\n  src=\"/assets/images/tutorials/bot-studio/bse-66.webp\"\n  alt=\"bse-66\"\n  naturalHeight={1324}\n  naturalWidth={846}\n/>\n\nResult will be shown as follows\n\n<FigureImage\n  src=\"/assets/images/tutorials/bot-studio/bse-68.webp\"\n  alt=\"bse-68\"\n  naturalHeight={990}\n  naturalWidth={2420}\n/>\n\n### Create intent yesno\n\nPreviously, we already made an NLU containing `yes` and `no` keywords. We will use that NLU as a classifier on an intent.\n\nFirst of all, we will create an intent in `order` flow for the keyword `yes`\n\n<FigureImage\n  src=\"/assets/images/tutorials/bot-studio/bse-69.webp\"\n  alt=\"bse-69\"\n  naturalHeight={1422}\n  naturalWidth={804}\n/>\n\nThen, we will create an intent for keyword `no`\n\n<FigureImage\n  src=\"/assets/images/tutorials/bot-studio/bse-70.webp\"\n  alt=\"bse-70\"\n  naturalHeight={1392}\n  naturalWidth={822}\n/>\n\nBoth intent will appear as follows\n\n<FigureImage\n  src=\"/assets/images/tutorials/bot-studio/bse-71.webp\"\n  alt=\"bse-71\"\n  naturalHeight={1378}\n  naturalWidth={3276}\n/>\n\n### Create done state\n\nIn `done` state, we will complete the order by saying thank you and end the conversation. We will also set a condition when a user wants to cancel the order. So in this state we will create two actions: `sayThanks` and `sayCancel`.\n\n<FigureImage\n  src=\"/assets/images/tutorials/bot-studio/bse-72.webp\"\n  alt=\"bse-72\"\n  naturalHeight={940}\n  naturalWidth={798}\n/>\n\n<FigureImage\n  src=\"/assets/images/tutorials/bot-studio/bse-73.webp\"\n  alt=\"bse-73\"\n  naturalHeight={914}\n  naturalWidth={786}\n/>\n\nAlso, don't forget to add self transition in the state. Result:\n\n<FigureImage\n  src=\"/assets/images/tutorials/bot-studio/bse-74.webp\"\n  alt=\"bse-74\"\n  naturalHeight={1218}\n  naturalWidth={2390}\n/>\n\n### Create a transition from confirmPizza to done\n\nNext, we will connect `confirmPizza` state to `done` state. Because `done` is the last state, we will set it as default transition. Connect `confirmPizza` to `done` by clicking the blue dot and drag the line to connect the states. Create Transition form will appear after you have successfully connected the states.\n\n<FigureImage\n  src=\"/assets/images/tutorials/bot-studio/bse-75.webp\"\n  alt=\"bse-75\"\n  naturalHeight={1084}\n  naturalWidth={840}\n/>\n\nFinal flow:\n\n<FigureImage\n  src=\"/assets/images/tutorials/bot-studio/bse-76.webp\"\n  alt=\"bse-76\"\n  naturalHeight={1208}\n  naturalWidth={3262}\n/>\n\n## Publish Your Bot\n\nTo save your work, click on Publish button located at the top right of your screen. Fill in the changelog as “initial version of pizza bot” for future reference. Click “Publish” to continue.\n\n<FigureImage\n  src=\"/assets/images/tutorials/bot-studio/bse-77.webp\"\n  alt=\"bse-77\"\n  naturalHeight={1218}\n  naturalWidth={2390}\n/>\n\n<FigureImage\n  src=\"/assets/images/tutorials/bot-studio/bse-78.webp\"\n  alt=\"bse-78\"\n  naturalHeight={974}\n  naturalWidth={1066}\n/>\n\nEvery time you publish a bot, it will record a hash number (similar to Git's hash number) in Revision List.\n\n<FigureImage\n  src=\"/assets/images/tutorials/bot-studio/bse-79.webp\"\n  alt=\"bse-79\"\n  naturalHeight={538}\n  naturalWidth={3298}\n/>\n\n## Testing Your Chatbot\n\nClick on Test Chatbot on Bot Studio then type “order” to initialize `order` flow.\n\n<FigureImage\n  src=\"/assets/images/tutorials/bot-studio/bse-80.webp\"\n  alt=\"bse-80\"\n  naturalHeight={994}\n  naturalWidth={1740}\n/>\n\nCheck on the rest of the flow and make sure everything you've made works.\n\n## Deploy Your Chatbot\n\nNow we will try to deploy our chatbot to LINE Messenger.\n\n### Create deployment\n\nFirst of all, we have to create a deployment first. Find the “Deployment” menu on the left sidebar.\n\n<FigureImage\n  src=\"/assets/images/tutorials/bot-studio/bse-81.webp\"\n  alt=\"bse-81\"\n  naturalHeight={1118}\n  naturalWidth={648}\n/>\n\nClick on Create Deployment button on top right\n\n<FigureImage\n  src=\"/assets/images/tutorials/bot-studio/bse-82.webp\"\n  alt=\"bse-82\"\n  naturalHeight={794}\n  naturalWidth={3296}\n/>\n\nChoose Patch on Deployment Version.\n\n<FigureImage\n  src=\"/assets/images/tutorials/bot-studio/bse-83.webp\"\n  alt=\"bse-83\"\n  naturalHeight={932}\n  naturalWidth={1557}\n/>\n\nSuccesfully created deployment looks like this.\n\n<FigureImage\n  src=\"/assets/images/tutorials/bot-studio/bse-84.webp\"\n  alt=\"bse-84\"\n  naturalHeight={511}\n  naturalWidth={1906}\n/>\n\n### Create Environment\n\nKata | Platform 3.0 allows you to set up 3 separate environments in your project: Development, Staging, and Production. Inside each environment, you can add as many messaging channel as you like. You have to setup environment first before integrating to messaging channel.\n\nIn this tutorial, we will try to setup Production environment. Click on Environment menu under Deploy and you will be shown 3 available environments.\n\n<FigureImage\n  src=\"/assets/images/tutorials/bot-studio/bse-85.webp\"\n  alt=\"bse-85\"\n  naturalHeight={1230}\n  naturalWidth={3342}\n/>\n\nClick “Create Environment” button in Production.\n\nThe first field we have to fill in is deployment version. Choose 0.0.1 (shown on the previous step) as deployment version in Production.\n\nAnother field we have to fill in is environment URL. This URL is used to access CMS Client later.\n\n<FigureImage\n  src=\"/assets/images/tutorials/bot-studio/bse-86.webp\"\n  alt=\"bse-86\"\n  naturalHeight={788}\n  naturalWidth={858}\n/>\n\nSuccessfully created environment will look like this\n\n<FigureImage\n  src=\"/assets/images/tutorials/bot-studio/bse-87.webp\"\n  alt=\"bse-87\"\n  naturalHeight={480}\n  naturalWidth={882}\n/>\n\nNext, we need to create channel inside the environment. Click on Create Channel on Production environment and you will be redirected to Create Channel page\n\n<FigureImage\n  src=\"/assets/images/tutorials/bot-studio/bse-88.webp\"\n  alt=\"bse-88\"\n  naturalHeight={1342}\n  naturalWidth={3352}\n/>\n\nNext, click “Create Channel” and fill in as follows\n\n<FigureImage\n  src=\"/assets/images/tutorials/bot-studio/bse-89.webp\"\n  alt=\"bse-89\"\n  naturalHeight={1280}\n  naturalWidth={916}\n/>\n\nLet's setup LINE developer console so you can fill in fields highlighted with red box.\n\n### Registration to LINE Developer console\n\n**Create LINE account**\n\nTo sign up for a LINE developer account, you have to have a LINE account by <a href=\"https://line.me/en/download\" target=\"_blank\"> installing LINE application, either desktop or mobile app.</a> After you successfully registered, sign in to <a href=\"https://developers.line.biz/en/\" target=\"_blank\">https://developers.line.biz/en/</a>\n\nIn LINE Developer Console click Log In.\n\n<FigureImage\n  src=\"/assets/images/tutorials/bot-studio/bse-90.webp\"\n  alt=\"bse-90\"\n  naturalHeight={1726}\n  naturalWidth={3358}\n/>\n\nClick on Log in with LINE\n\n<FigureImage\n  src=\"/assets/images/tutorials/bot-studio/bse-91.webp\"\n  alt=\"bse-91\"\n  naturalHeight={1134}\n  naturalWidth={1054}\n/>\n\nEnter your email and password\n\n<FigureImage\n  src=\"/assets/images/tutorials/bot-studio/bse-92.webp\"\n  alt=\"bse-92\"\n  naturalHeight={1046}\n  naturalWidth={994}\n/>\n\nAfter you successfully logged in, you will be redirected to provider list dashboard\n\n<FigureImage\n  src=\"/assets/images/tutorials/bot-studio/bse-93.webp\"\n  alt=\"bse-93\"\n  naturalHeight={1686}\n  naturalWidth={3328}\n/>\n\n**Create a Provider**\n\nClick “Create New Provider”\n\n<FigureImage\n  src=\"/assets/images/tutorials/bot-studio/bse-94.webp\"\n  alt=\"bse-94\"\n  naturalHeight={1158}\n  naturalWidth={2814}\n/>\n\nFill in provider name\n\n<FigureImage\n  src=\"/assets/images/tutorials/bot-studio/bse-95.webp\"\n  alt=\"bse-95\"\n  naturalHeight={1382}\n  naturalWidth={3358}\n/>\n\nClick Confirm to continue. You will have to re-confirm the provider name since it cannot be changed later. Click “Create” to confirm.\n\n<FigureImage\n  src=\"/assets/images/tutorials/bot-studio/bse-96.webp\"\n  alt=\"bse-96\"\n  naturalHeight={1154}\n  naturalWidth={3358}\n/>\n\n### Setup Channel for LINE Integration\n\nSetup channel in Messaging API by clicking Create Channel on Messaging API.\n\n<FigureImage\n  src=\"/assets/images/tutorials/bot-studio/bse-97.webp\"\n  alt=\"bse-97\"\n  naturalHeight={1438}\n  naturalWidth={2812}\n/>\n\nFill in the form as follows\n\n<FigureImage\n  src=\"/assets/images/tutorials/bot-studio/bse-98.webp\"\n  alt=\"bse-98\"\n  naturalHeight={1714}\n  naturalWidth={3348}\n/>\n\n<FigureImage\n  src=\"/assets/images/tutorials/bot-studio/bse-99.webp\"\n  alt=\"bse-99\"\n  naturalHeight={536}\n  naturalWidth={2726}\n/>\n\nNext, you have to choose **Developer Trial as Plan**\n\n<FigureImage\n  src=\"/assets/images/tutorials/bot-studio/bse-100.webp\"\n  alt=\"bse-100\"\n  naturalHeight={510}\n  naturalWidth={2322}\n/>\n\nAccept Terms of Use from LINE then click Create\n\n<FigureImage\n  src=\"/assets/images/tutorials/bot-studio/bse-101.webp\"\n  alt=\"bse-101\"\n  naturalHeight={548}\n  naturalWidth={1970}\n/>\n\nSuccessfuly created channel will look like this\n\n<FigureImage\n  src=\"/assets/images/tutorials/bot-studio/bse-102.webp\"\n  alt=\"bse-102\"\n  naturalHeight={1012}\n  naturalWidth={1176}\n/>\n\n### Integration LINE and Your Chatbot\n\nClick on created channel to fill in Channel Access Token and Channel Secret. Here is the guideline to fill in those fields\n\n#### Fill in Channel Access Token field\n\nClick “Issue” in Messaging Settings section\n\n<FigureImage\n  src=\"/assets/images/tutorials/bot-studio/bse-103.webp\"\n  alt=\"bse-103\"\n  naturalHeight={1086}\n  naturalWidth={2724}\n/>\n\nThen, issue dialog will pop up. Click on Issue to continue\n\n<FigureImage\n  src=\"/assets/images/tutorials/bot-studio/bse-104.webp\"\n  alt=\"bse-104\"\n  naturalHeight={782}\n  naturalWidth={1084}\n/>\n\nThen, copy Channel Access Token below and paste it on Create Channel form in Kata | Platform\n\n<FigureImage\n  src=\"/assets/images/tutorials/bot-studio/bse-105.webp\"\n  alt=\"bse-105\"\n  naturalHeight={380}\n  naturalWidth={2732}\n/>\n\n<FigureImage\n  src=\"/assets/images/tutorials/bot-studio/bse-106.webp\"\n  alt=\"bse-106\"\n  naturalHeight={964}\n  naturalWidth={740}\n/>\n\n**Fill in Channel Secret field**\n\nIn Basic Information, copy Channel Secret from LINE to Kata | Platform\n\n<FigureImage\n  src=\"/assets/images/tutorials/bot-studio/bse-107.webp\"\n  alt=\"bse-107\"\n  naturalHeight={1612}\n  naturalWidth={2896}\n/>\n\n<FigureImage\n  src=\"/assets/images/tutorials/bot-studio/bse-108.webp\"\n  alt=\"bse-108\"\n  naturalHeight={996}\n  naturalWidth={766}\n/>\n\nFinal result in Kata | Platform will look like this\n\n<FigureImage\n  src=\"/assets/images/tutorials/bot-studio/bse-109.webp\"\n  alt=\"bse-109\"\n  naturalHeight={996}\n  naturalWidth={766}\n/>\n\nClick “Create” to generate webhook URL from Kata | Platform.\n\n<FigureImage\n  src=\"/assets/images/tutorials/bot-studio/bse-110.webp\"\n  alt=\"bse-110\"\n  naturalHeight={506}\n  naturalWidth={2780}\n/>\n\nAfter webhook URL is generated, go to Messaging Settings in LINE developer console to enable webhook. **Please check that you already enable the webhook by click on Enable in \"Use Webhoooks\" section which placed above Webhook URL field**\n\n<FigureImage\n  src=\"/assets/images/tutorials/bot-studio/bse-111.webp\"\n  alt=\"bse-111\"\n  naturalHeight={678}\n  naturalWidth={2832}\n/>\n\nClick “Update” then paste the webhook URL to LINE developer console.\n\n<FigureImage\n  src=\"/assets/images/tutorials/bot-studio/bse-112.webp\"\n  alt=\"bse-112\"\n  naturalHeight={892}\n  naturalWidth={2820}\n/>\n\nClick “Update” then click “Verify.”\n\n<FigureImage\n  src=\"/assets/images/tutorials/bot-studio/bse-113.webp\"\n  alt=\"bse-113\"\n  naturalHeight={928}\n  naturalWidth={2836}\n/>\n\nNext, disable auto-reply messages and greeting messages\n\n<FigureImage\n  src=\"/assets/images/tutorials/bot-studio/bse-114.webp\"\n  alt=\"bse-114\"\n  naturalHeight={856}\n  naturalWidth={2828}\n/>\n\nVoila! You have successfully deployed your bot to LINE Messenger.\n\nScan the QR Code in LINE Developer Console to add the bot.\n\n<FigureImage\n  src=\"/assets/images/tutorials/bot-studio/bse-115.webp\"\n  alt=\"bse-115\"\n  naturalHeight={582}\n  naturalWidth={2082}\n/>\n\nThen, test to scan QR Code\n\n<FigureImage\n  src=\"/assets/images/tutorials/bot-studio/bse-116.webp\"\n  alt=\"bse-116\"\n  naturalHeight={1920}\n  naturalWidth={1080}\n/>\n","code":"var Component=(()=>{var h=Object.create;var o=Object.defineProperty;var u=Object.getOwnPropertyDescriptor;var b=Object.getOwnPropertyNames;var p=Object.getPrototypeOf,m=Object.prototype.hasOwnProperty;var l=n=>o(n,\"__esModule\",{value:!0});var g=(n,i)=>()=>(i||n((i={exports:{}}).exports,i),i.exports),w=(n,i)=>{for(var s in i)o(n,s,{get:i[s],enumerable:!0})},r=(n,i,s,t)=>{if(i&&typeof i==\"object\"||typeof i==\"function\")for(let a of b(i))!m.call(n,a)&&(s||a!==\"default\")&&o(n,a,{get:()=>i[a],enumerable:!(t=u(i,a))||t.enumerable});return n},f=(n,i)=>r(l(o(n!=null?h(p(n)):{},\"default\",!i&&n&&n.__esModule?{get:()=>n.default,enumerable:!0}:{value:n,enumerable:!0})),n),k=(n=>(i,s)=>n&&n.get(i)||(s=r(l({}),i,1),n&&n.set(i,s),s))(typeof WeakMap!=\"undefined\"?new WeakMap:0);var d=g((v,c)=>{c.exports=_jsx_runtime});var W={};w(W,{default:()=>z,frontmatter:()=>y});var e=f(d()),y={layout:\"tutorial\",id:\"bot-studio\",title:\"Bot Studio Tutorial\",imgSpot:\"/assets/images/tutorials/spot-cms.webp\",product:\"kata-platform\",prev:\"hello-world-tutorial\",next:\"nl-studio-tutorial\",date:\"2018-07-07T07:00:00+07:00\"};function N(n={}){let{wrapper:i}=n.components||{};return i?(0,e.jsx)(i,Object.assign({},n,{children:(0,e.jsx)(s,{})})):s();function s(){let t=Object.assign({h2:\"h2\",a:\"a\",span:\"span\",p:\"p\",h3:\"h3\",strong:\"strong\",code:\"code\",pre:\"pre\",h4:\"h4\"},n.components),{FigureImage:a}=t;return a||C(\"FigureImage\",!0),(0,e.jsxs)(e.Fragment,{children:[(0,e.jsxs)(t.h2,{id:\"introduction\",children:[(0,e.jsx)(t.a,{className:\"anchor\",href:\"#introduction\",children:(0,e.jsx)(t.span,{className:\"icon icon-link\"})}),\"Introduction\"]}),`\n`,(0,e.jsx)(t.p,{children:\"Building a chatbot on Kata | Platform is quick and easy, even with a lack of programming knowledge. In this tutorial, we will learn how to create a simple bot on LINE Messenger to order a pizza. We will also learn how to train your bot with NL Studio.\"}),`\n`,(0,e.jsx)(t.p,{children:\"Let's start by looking at this bot diagram, or commonly called \\u201Cconversation tree.\\u201D Conversation tree is an overview of chatbot functionalities. In this conversation tree, we break down the process of ordering pizza and the types of bot action we want to use on each state.\"}),`\n`,(0,e.jsx)(a,{src:\"/assets/images/tutorials/bot-studio/bse-1.webp\",alt:\"bse-1\",naturalHeight:1040,naturalWidth:1040}),`\n`,(0,e.jsxs)(t.h2,{id:\"sign-up-to-kata--platform\",children:[(0,e.jsx)(t.a,{className:\"anchor\",href:\"#sign-up-to-kata--platform\",children:(0,e.jsx)(t.span,{className:\"icon icon-link\"})}),\"Sign up to Kata | Platform\"]}),`\n`,(0,e.jsx)(t.p,{children:\"Create an account on Kata | Platform to start building chatbot.\"}),`\n`,(0,e.jsxs)(t.p,{children:[\"On your browser, open \",(0,e.jsx)(\"a\",{href:\"https://platform.kata.ai/login\",target:\"_blank\",children:(0,e.jsx)(t.a,{href:\"https://platform.kata.ai/login\",children:\"https://platform.kata.ai/login\"})}),\" and click \\u201CSign Up\\u201D\"]}),`\n`,(0,e.jsx)(a,{src:\"/assets/images/tutorials/bot-studio/bse-2.webp\",alt:\"bse-2\",naturalHeight:1016,naturalWidth:870}),`\n`,(0,e.jsx)(t.p,{children:'Then fill the form with a username, an email, and an account type. Continue by clicking \"Sign Up.\"'}),`\n`,(0,e.jsx)(a,{src:\"/assets/images/tutorials/bot-studio/bse-3.webp\",alt:\"bse-3\",naturalHeight:1238,naturalWidth:872}),`\n`,(0,e.jsx)(t.p,{children:\"You will get a confirmation email once our team has verified your account.\"}),`\n`,(0,e.jsx)(t.p,{children:\"You may follow the instructions provided in the confirmation email to activate and start using your account.\"}),`\n`,(0,e.jsxs)(t.h2,{id:\"create-a-project\",children:[(0,e.jsx)(t.a,{className:\"anchor\",href:\"#create-a-project\",children:(0,e.jsx)(t.span,{className:\"icon icon-link\"})}),\"Create a Project\"]}),`\n`,(0,e.jsxs)(t.h3,{id:\"login-to-kata--platform\",children:[(0,e.jsx)(t.a,{className:\"anchor\",href:\"#login-to-kata--platform\",children:(0,e.jsx)(t.span,{className:\"icon icon-link\"})}),\"Login to Kata | Platform\"]}),`\n`,(0,e.jsxs)(t.p,{children:[\"On your browser, open \",(0,e.jsx)(\"a\",{href:\"https://platform.kata.ai/login\",target:\"_blank\",children:\"platform.kata.ai/login\"}),\" and enter your username & password.\"]}),`\n`,(0,e.jsx)(a,{src:\"/assets/images/tutorials/bot-studio/bse-4.webp\",alt:\"bse-4\",naturalHeight:1050,naturalWidth:878}),`\n`,(0,e.jsx)(t.p,{children:'Click \"Login\" to continue.'}),`\n`,(0,e.jsxs)(t.h3,{id:\"create-a-project-1\",children:[(0,e.jsx)(t.a,{className:\"anchor\",href:\"#create-a-project-1\",children:(0,e.jsx)(t.span,{className:\"icon icon-link\"})}),\"Create a project\"]}),`\n`,(0,e.jsx)(t.p,{children:\"After you logged in, you will be taken to the Project Page.\"}),`\n`,(0,e.jsx)(a,{src:\"/assets/images/tutorials/bot-studio/bse-5.webp\",alt:\"bse-5\",naturalHeight:1046,naturalWidth:2896}),`\n`,(0,e.jsx)(t.p,{children:\"Click on \\u201CCreate Project\\u201D and fill in the form. Each project contains one bot design, one NL, and one CMS.\"}),`\n`,(0,e.jsx)(a,{src:\"/assets/images/tutorials/bot-studio/bse-6.webp\",alt:\"bse-6\",naturalHeight:1152,naturalWidth:842}),`\n`,(0,e.jsx)(t.p,{children:\"NLU language is used to determine which language model you want to use. Currently, we support Bahasa Indonesia and English.\"}),`\n`,(0,e.jsxs)(t.p,{children:[\"You can also choose NLU Visibility to be public or private. If you choose public, \",(0,e.jsx)(t.strong,{children:\"all Kata | Platform users\"}),\" can utilize your NLU using root and inherit function.\"]}),`\n`,(0,e.jsxs)(t.h2,{id:\"create-fallback-flow\",children:[(0,e.jsx)(t.a,{className:\"anchor\",href:\"#create-fallback-flow\",children:(0,e.jsx)(t.span,{className:\"icon icon-link\"})}),\"Create Fallback Flow\"]}),`\n`,(0,e.jsxs)(t.h3,{id:\"create-fallback-flow-1\",children:[(0,e.jsx)(t.a,{className:\"anchor\",href:\"#create-fallback-flow-1\",children:(0,e.jsx)(t.span,{className:\"icon icon-link\"})}),\"Create fallback flow\"]}),`\n`,(0,e.jsx)(t.p,{children:\"Once you create a project, you will be redirected to the Bot Studio menu.\"}),`\n`,(0,e.jsxs)(t.p,{children:[\"Now we are going to learn how to create a flow. Flow is a container of \",(0,e.jsx)(t.strong,{children:\"intent, state, and action\"}),\". A flow typically represents a linear process.\"]}),`\n`,(0,e.jsx)(t.p,{children:\"The first flow that we will create is a Fallback Flow. Its purpose is to handle undefined users input, or commonly called \\u201Celse condition\\u201D state. In this case, the \\u201Celse condition\\u201D is everything that is not \\u201CStart Order\\u201D.\"}),`\n`,(0,e.jsx)(a,{src:\"/assets/images/tutorials/bot-studio/bse-1.webp\",alt:\"bse-1\",naturalHeight:1040,naturalWidth:1040}),`\n`,(0,e.jsx)(t.p,{children:\"You may find a flow that is created automatically by the system or default flow. We will delete that flow by pressing more button and then \\u201CDelete.\\u201D\"}),`\n`,(0,e.jsx)(a,{src:\"/assets/images/tutorials/bot-studio/bse-8.webp\",alt:\"bse-8\",naturalHeight:1008,naturalWidth:1762}),`\n`,(0,e.jsxs)(t.p,{children:[\"Next, click \\u201CCreate Flow\\u201D button to create \",(0,e.jsx)(t.code,{children:\"fallback\"}),\" flow. Set flow to active, persistent, and default.\"]}),`\n`,(0,e.jsx)(a,{src:\"/assets/images/tutorials/bot-studio/bse-9.webp\",alt:\"bse-9\",naturalHeight:780,naturalWidth:846}),`\n`,(0,e.jsxs)(t.h3,{id:\"create-fallback-intent\",children:[(0,e.jsx)(t.a,{className:\"anchor\",href:\"#create-fallback-intent\",children:(0,e.jsx)(t.span,{className:\"icon icon-link\"})}),\"Create fallback intent\"]}),`\n`,(0,e.jsxs)(t.p,{children:[\"After you have created \",(0,e.jsx)(t.code,{children:\"fallback\"}),\" flow, we will create new intent by pressing the Intents tab on the sub-menu. Then, we will create a new intent for \",(0,e.jsx)(t.code,{children:\"fallback\"}),\" flow. Click \\u201CCreate Intent\\u201D button to create.\"]}),`\n`,(0,e.jsx)(a,{src:\"/assets/images/tutorials/bot-studio/bse-10.webp\",alt:\"bse-10\",naturalHeight:674,naturalWidth:1960}),`\n`,(0,e.jsx)(t.p,{children:\"Then, fill in the form as follows\"}),`\n`,(0,e.jsx)(a,{src:\"/assets/images/tutorials/bot-studio/bse-11.webp\",alt:\"bse-11\",naturalHeight:808,naturalWidth:892}),`\n`,(0,e.jsxs)(t.h3,{id:\"create-state-init\",children:[(0,e.jsx)(t.a,{className:\"anchor\",href:\"#create-state-init\",children:(0,e.jsx)(t.span,{className:\"icon icon-link\"})}),\"Create State init\"]}),`\n`,(0,e.jsxs)(t.p,{children:[\"Next, we will create a state called \",(0,e.jsx)(t.code,{children:\"init\"}),\". Click the \\u201D+\\u201D button at the bottom right of your screen.\"]}),`\n`,(0,e.jsx)(a,{src:\"/assets/images/tutorials/bot-studio/bse-12.webp\",alt:\"bse-12\",naturalHeight:1722,naturalWidth:3342}),`\n`,(0,e.jsxs)(t.p,{children:[\"Fill state with name \",(0,e.jsx)(t.code,{children:\"init\"}),\" on Overview tab and set it to initial state and end state (as shown below).\"]}),`\n`,(0,e.jsxs)(t.p,{children:[\"Enabling Initial State and End State will make \",(0,e.jsx)(t.code,{children:\"init\"}),\" the first and the last flow to be checked by the bot when there isn't any flow that matches a user's input.\"]}),`\n`,(0,e.jsx)(a,{src:\"/assets/images/tutorials/bot-studio/bse-13.webp\",alt:\"bse-13\",naturalHeight:734,naturalWidth:910}),`\n`,(0,e.jsx)(t.p,{children:\"Now we will create a bot response to display an apology message. Click \\u201CAdd actions\\u201D button to create a response.\"}),`\n`,(0,e.jsx)(a,{src:\"/assets/images/tutorials/bot-studio/bse-14.webp\",alt:\"bse-14\",naturalHeight:626,naturalWidth:860}),`\n`,(0,e.jsx)(t.p,{children:\"Container for creating action will appear\"}),`\n`,(0,e.jsx)(a,{src:\"/assets/images/tutorials/bot-studio/bse-15.webp\",alt:\"bse-15\",naturalHeight:1200,naturalWidth:840}),`\n`,(0,e.jsxs)(t.h3,{id:\"create-action-text-in-state-init\",children:[(0,e.jsx)(t.a,{className:\"anchor\",href:\"#create-action-text-in-state-init\",children:(0,e.jsx)(t.span,{className:\"icon icon-link\"})}),\"Create Action Text in State init\"]}),`\n`,(0,e.jsx)(t.p,{children:\"Click on \\u201C+\\u201D button to create a new action.\"}),`\n`,(0,e.jsx)(a,{src:\"/assets/images/tutorials/bot-studio/bse-16.webp\",alt:\"bse-16\",naturalHeight:1110,naturalWidth:870}),`\n`,(0,e.jsx)(t.p,{children:\"Choose action type \\u201CText\\u201D\"}),`\n`,(0,e.jsx)(a,{src:\"/assets/images/tutorials/bot-studio/bse-17.webp\",alt:\"bse-17\",naturalHeight:1382,naturalWidth:860}),`\n`,(0,e.jsx)(t.p,{children:\"Then, fill in the form\"}),`\n`,(0,e.jsx)(a,{src:\"/assets/images/tutorials/bot-studio/bse-18.webp\",alt:\"bse-18\",naturalHeight:1348,naturalWidth:866}),`\n`,(0,e.jsx)(t.p,{children:\"Click on \\u201CCreate Action\\u201D button.\"}),`\n`,(0,e.jsx)(a,{src:\"/assets/images/tutorials/bot-studio/bse-19.webp\",alt:\"bse-19\",naturalHeight:770,naturalWidth:876}),`\n`,(0,e.jsxs)(t.h3,{id:\"create-self-transition-in-state-init\",children:[(0,e.jsx)(t.a,{className:\"anchor\",href:\"#create-self-transition-in-state-init\",children:(0,e.jsx)(t.span,{className:\"icon icon-link\"})}),\"Create Self Transition in State Init\"]}),`\n`,(0,e.jsxs)(t.p,{children:[\"The last step to finalize \",(0,e.jsx)(t.code,{children:\"fallback\"}),\" flow is to create self-transition for \",(0,e.jsx)(t.code,{children:\"init\"}),\" state. Self transition is required to avoid error when the next state is not available. Click on \\u201CTransitions\\u201D and enable Self Transition.\"]}),`\n`,(0,e.jsx)(a,{src:\"/assets/images/tutorials/bot-studio/bse-20.webp\",alt:\"bse-20\",naturalHeight:1202,naturalWidth:866}),`\n`,(0,e.jsx)(t.p,{children:\"Click \\u201CCreate\\u201D button. Your screen should look like this\"}),`\n`,(0,e.jsx)(a,{src:\"/assets/images/tutorials/bot-studio/bse-21.webp\",alt:\"bse-21\",naturalHeight:1018,naturalWidth:1840}),`\n`,(0,e.jsxs)(t.h2,{id:\"create-order-flow\",children:[(0,e.jsx)(t.a,{className:\"anchor\",href:\"#create-order-flow\",children:(0,e.jsx)(t.span,{className:\"icon icon-link\"})}),\"Create Order Flow\"]}),`\n`,(0,e.jsxs)(t.p,{children:[\"Next, we will create \",(0,e.jsx)(t.code,{children:\"Start Order\"}),\" flow to handle pizza order.\"]}),`\n`,(0,e.jsx)(a,{src:\"/assets/images/tutorials/bot-studio/bse-1.webp\",alt:\"bse-1\",naturalHeight:1040,naturalWidth:1040}),`\n`,(0,e.jsxs)(t.h3,{id:\"create-flow-order\",children:[(0,e.jsx)(t.a,{className:\"anchor\",href:\"#create-flow-order\",children:(0,e.jsx)(t.span,{className:\"icon icon-link\"})}),\"Create Flow Order\"]}),`\n`,(0,e.jsxs)(t.p,{children:[\"First step is to create another flow called \",(0,e.jsx)(t.code,{children:\"order\"}),\" .\"]}),`\n`,(0,e.jsx)(a,{src:\"/assets/images/tutorials/bot-studio/bse-22.webp\",alt:\"bse-22\",naturalHeight:1676,naturalWidth:880}),`\n`,(0,e.jsx)(t.p,{children:\"Created flow will be shown like this\"}),`\n`,(0,e.jsx)(a,{src:\"/assets/images/tutorials/bot-studio/bse-23.webp\",alt:\"bse-23\",naturalHeight:1098,naturalWidth:1642}),`\n`,(0,e.jsxs)(t.h3,{id:\"create-keyword-nlus-for-order\",children:[(0,e.jsx)(t.a,{className:\"anchor\",href:\"#create-keyword-nlus-for-order\",children:(0,e.jsx)(t.span,{className:\"icon icon-link\"})}),\"Create Keyword NLUs for 'Order'\"]}),`\n`,(0,e.jsxs)(t.p,{children:[\"In this step, we will define the NLU (Natural Language Understanding) to trigger \",(0,e.jsx)(t.code,{children:\"order\"}),\" flow. NLU is used to translate user inputs into data that machine can understand. There are many types of NLU, but the type that we will use in this particular flow is called \",(0,e.jsx)(t.code,{children:\"keyword\"}),\". To define the NLU, go to NLUs menu.\"]}),`\n`,(0,e.jsx)(a,{src:\"/assets/images/tutorials/bot-studio/bse-24.webp\",alt:\"bse-24\",naturalHeight:1114,naturalWidth:1680}),`\n`,(0,e.jsx)(t.p,{children:\"Next, click on \\u201CCreate NLU\\u201D\"}),`\n`,(0,e.jsx)(a,{src:\"/assets/images/tutorials/bot-studio/bse-25.webp\",alt:\"bse-25\",naturalHeight:1078,naturalWidth:1986}),`\n`,(0,e.jsxs)(t.p,{children:[\"Choose Keyword type and enter keywords that represents \",(0,e.jsx)(t.code,{children:\"order\"}),\", such as \\u201Corder\\u201D, \\u201Cpls order\\u201D, \\u201Corder pza\\u201D.\"]}),`\n`,(0,e.jsx)(a,{src:\"/assets/images/tutorials/bot-studio/bse-26.webp\",alt:\"bse-26\",naturalHeight:1698,naturalWidth:904}),`\n`,(0,e.jsx)(t.p,{children:\"Successfully created NLU looks like this\"}),`\n`,(0,e.jsx)(a,{src:\"/assets/images/tutorials/bot-studio/bse-27.webp\",alt:\"bse-27\",naturalHeight:1034,naturalWidth:2464}),`\n`,(0,e.jsxs)(t.h3,{id:\"create-intent-for-order\",children:[(0,e.jsx)(t.a,{className:\"anchor\",href:\"#create-intent-for-order\",children:(0,e.jsx)(t.span,{className:\"icon icon-link\"})}),\"Create Intent for Order\"]}),`\n`,(0,e.jsxs)(t.p,{children:[\"Each flow requires an \",(0,e.jsx)(t.code,{children:\"intent\"}),\" to classify user's inquiry and trigger matching flow. So our next step is to set initial intent for \",(0,e.jsx)(t.code,{children:\"order\"}),\" flow.\"]}),`\n`,(0,e.jsxs)(t.p,{children:[\"Go back to Conversation Flow menu and click on \",(0,e.jsx)(t.code,{children:\"order\"}),\" flow, then click on \\u201CIntents\\u201D tab.\"]}),`\n`,(0,e.jsx)(a,{src:\"/assets/images/tutorials/bot-studio/bse-28.webp\",alt:\"bse-28\",naturalHeight:1012,naturalWidth:1922}),`\n`,(0,e.jsxs)(t.p,{children:[\"Previously, you already created keyword NLUs called \",(0,e.jsx)(t.code,{children:\"order\"}),\". We will set that keyword as intent in \",(0,e.jsx)(t.code,{children:\"order\"}),\" flow. Map the NLU on classifier section.\"]}),`\n`,(0,e.jsx)(a,{src:\"/assets/images/tutorials/bot-studio/bse-29.webp\",alt:\"bse-29\",naturalHeight:1688,naturalWidth:922}),`\n`,(0,e.jsx)(t.p,{children:\"Click \\u201CCreate\\u201D to create the intent. Your screen should look like this\"}),`\n`,(0,e.jsx)(a,{src:\"/assets/images/tutorials/bot-studio/bse-30.webp\",alt:\"bse-30\",naturalHeight:1060,naturalWidth:2564}),`\n`,(0,e.jsxs)(t.h3,{id:\"create-a-state-named-init\",children:[(0,e.jsx)(t.a,{className:\"anchor\",href:\"#create-a-state-named-init\",children:(0,e.jsx)(t.span,{className:\"icon icon-link\"})}),\"Create a State Named init\"]}),`\n`,(0,e.jsxs)(t.p,{children:[\"Every flow must have at least one state. Because we haven't created any state in \",(0,e.jsx)(t.code,{children:\"order\"}),\" flow, we have to create one. Let's create a state called \",(0,e.jsx)(t.code,{children:\"init\"}),\".\"]}),`\n`,(0,e.jsx)(a,{src:\"/assets/images/tutorials/bot-studio/bse-31.webp\",alt:\"bse-31\",naturalHeight:1676,naturalWidth:854}),`\n`,(0,e.jsx)(t.p,{children:\"Click \\u201CCreate\\u201D button to create initial state.\"}),`\n`,(0,e.jsxs)(t.p,{children:[\"Next, we will define how the bot will respond to user who entered \",(0,e.jsx)(t.code,{children:\"order\"}),\" flow.\"]}),`\n`,(0,e.jsxs)(t.h2,{id:\"create-action-for-pizza-menu\",children:[(0,e.jsx)(t.a,{className:\"anchor\",href:\"#create-action-for-pizza-menu\",children:(0,e.jsx)(t.span,{className:\"icon icon-link\"})}),\"Create Action for Pizza Menu\"]}),`\n`,(0,e.jsxs)(t.p,{children:[\"As seen on the conversation tree below, the first message in \",(0,e.jsx)(t.code,{children:\"order\"}),\" flow is \\u201CShow Pizza Type\\u201D\"]}),`\n`,(0,e.jsx)(a,{src:\"/assets/images/tutorials/bot-studio/bse-1.webp\",alt:\"bse-1\",naturalHeight:1040,naturalWidth:1040}),`\n`,(0,e.jsxs)(t.h3,{id:\"create-a-state-to-show-pizza-type-in-text-action-type\",children:[(0,e.jsx)(t.a,{className:\"anchor\",href:\"#create-a-state-to-show-pizza-type-in-text-action-type\",children:(0,e.jsx)(t.span,{className:\"icon icon-link\"})}),\"Create a State to Show Pizza type in Text Action Type\"]}),`\n`,(0,e.jsxs)(t.p,{children:[\"To get started, we need to create a state named \",(0,e.jsx)(t.code,{children:\"showPizza\"}),\" on \",(0,e.jsx)(t.code,{children:\"order\"}),\" flow. Click on \\u201C+\\u201D button in Conversation Flow menu.\"]}),`\n`,(0,e.jsx)(a,{src:\"/assets/images/tutorials/bot-studio/bse-33.webp\",alt:\"bse-33\",naturalHeight:1304,naturalWidth:854}),`\n`,(0,e.jsxs)(t.p,{children:[\"Let's begin by creating an action called \",(0,e.jsx)(t.code,{children:\"pizzaOptions\"}),\". This action will inform users in \",(0,e.jsx)(t.strong,{children:\"text about our available pizza menu\"}),\".\"]}),`\n`,(0,e.jsx)(t.p,{children:\"Click on \\u201C+\\u201D button to create an action and choose Text as action type.\"}),`\n`,(0,e.jsx)(a,{src:\"/assets/images/tutorials/bot-studio/bse-34.webp\",alt:\"bse-34\",naturalHeight:1540,naturalWidth:850}),`\n`,(0,e.jsx)(t.p,{children:\"Fill in Text action type to inform our pizza menu\"}),`\n`,(0,e.jsx)(a,{src:\"/assets/images/tutorials/bot-studio/bse-35.webp\",alt:\"bse-35\",naturalHeight:917,naturalWidth:792}),`\n`,(0,e.jsxs)(t.p,{children:[\"Click on \\u201CCreate Action\\u201D to finalize. Next step is to create an action called \",(0,e.jsx)(t.code,{children:\"askOptions\"})]}),`\n`,(0,e.jsx)(a,{src:\"/assets/images/tutorials/bot-studio/bse-36.webp\",alt:\"bse-36\",naturalHeight:924,naturalWidth:792}),`\n`,(0,e.jsx)(t.p,{children:\"Click on \\u201CCreate Action\\u201D button. Your form should look like this\"}),`\n`,(0,e.jsx)(a,{src:\"/assets/images/tutorials/bot-studio/bse-37.webp\",alt:\"bse-37\",naturalHeight:886,naturalWidth:864}),`\n`,(0,e.jsx)(t.p,{children:\"Then you have to make self-transition in Transition tab as follow\"}),`\n`,(0,e.jsx)(a,{src:\"/assets/images/tutorials/bot-studio/bse-37-1.webp\",alt:\"bse-37-1\",naturalHeight:920,naturalWidth:1308}),`\n`,(0,e.jsx)(t.p,{children:\"Click \\u201CCreate\\u201D to create the state. Successfully created state will look like this\"}),`\n`,(0,e.jsx)(a,{src:\"/assets/images/tutorials/bot-studio/bse-38.webp\",alt:\"bse-38\",naturalHeight:1042,naturalWidth:2014}),`\n`,(0,e.jsxs)(t.h3,{id:\"update-showpizza-state-into-show-pizza-menu-in-carousel-action-type\",children:[(0,e.jsx)(t.a,{className:\"anchor\",href:\"#update-showpizza-state-into-show-pizza-menu-in-carousel-action-type\",children:(0,e.jsx)(t.span,{className:\"icon icon-link\"})}),\"Update showPizza state Into Show Pizza Menu in Carousel Action Type\"]}),`\n`,(0,e.jsxs)(t.p,{children:[\"Previous step is an example to create action to \",(0,e.jsx)(t.strong,{children:\"show pizza menu in text.\"}),\" Let's try to update the state into Carousel action type.\"]}),`\n`,(0,e.jsxs)(t.p,{children:[\"To update the state, click on \",(0,e.jsx)(t.code,{children:\"showPizza\"}),\" state and an update state form will appear\"]}),`\n`,(0,e.jsx)(a,{src:\"/assets/images/tutorials/bot-studio/bse-39.webp\",alt:\"bse-39\",naturalHeight:1732,naturalWidth:1008}),`\n`,(0,e.jsx)(t.p,{children:\"Then, remove all actions in the state by clicking \\u201Cx\\u201D on each action.\"}),`\n`,(0,e.jsx)(a,{src:\"/assets/images/tutorials/bot-studio/bse-40.webp\",alt:\"bse-40\",naturalHeight:918,naturalWidth:832}),`\n`,(0,e.jsxs)(t.p,{children:[\"After removing available actions, we will create an action called \",(0,e.jsx)(t.code,{children:\"pizzaMenu\"}),\" as Carousel action type.\"]}),`\n`,(0,e.jsx)(t.p,{children:\"Click on \\u201CAdd\\u201D actions button then click on \\u201C+\\u201D button to create a new action. Choose Carousel action type to continue.\"}),`\n`,(0,e.jsx)(a,{src:\"/assets/images/tutorials/bot-studio/bse-41.webp\",alt:\"bse-41\",naturalHeight:1142,naturalWidth:836}),`\n`,(0,e.jsxs)(t.p,{children:[\"Enter \",(0,e.jsx)(t.code,{children:\"pizzaMenu\"}),\" as name\"]}),`\n`,(0,e.jsx)(a,{src:\"/assets/images/tutorials/bot-studio/bse-42.webp\",alt:\"bse-42\",naturalHeight:474,naturalWidth:826}),`\n`,(0,e.jsxs)(t.p,{children:[\"Fill in the carousel content by clicking \\u201CAdd carousel\\u201D button, then click on \\u201CAdd action\\u201D button to define the \",(0,e.jsx)(t.strong,{children:\"label and type\"}),\". Next, click on Add Payload button to enter \",(0,e.jsx)(t.strong,{children:\"key and value\"}),\".\"]}),`\n`,(0,e.jsx)(t.p,{children:\"Fill in first carousel with this data\"}),`\n`,(0,e.jsx)(t.pre,{children:(0,e.jsxs)(t.code,{className:\"code-highlight\",children:[(0,e.jsx)(t.span,{className:\"code-line\",children:`Title: Pepperoni\n`}),(0,e.jsx)(t.span,{className:\"code-line\",children:`Text: This is the favorite of Peps\n`}),(0,e.jsx)(t.span,{className:\"code-line\",children:`Thumbnail Image Url: https://www.wikihow.com/images/thumb/a/a7/Make-Pepperoni-Pizza-Step-19-Version-2.jpg/aid1074004-v4-728px-Make-Pepperoni-Pizza-Step-19-Version-2.jpg.webp\n`}),(0,e.jsx)(t.span,{className:\"code-line\",children:`Actions:\n`}),(0,e.jsx)(t.span,{className:\"code-line\",children:`  Label: Pepperoni\n`}),(0,e.jsx)(t.span,{className:\"code-line\",children:`  Type: Postback\n`}),(0,e.jsx)(t.span,{className:\"code-line\",children:`  Payload:\n`}),(0,e.jsx)(t.span,{className:\"code-line\",children:`    - key: type\n`}),(0,e.jsx)(t.span,{className:\"code-line\",children:`      value: pizza\n`}),(0,e.jsx)(t.span,{className:\"code-line\",children:`    - key: pizza\n`}),(0,e.jsx)(t.span,{className:\"code-line\",children:`      value: Pepperoni\n`})]})}),`\n`,(0,e.jsx)(t.p,{children:\"Fill in second carousel with this data\"}),`\n`,(0,e.jsx)(t.pre,{children:(0,e.jsxs)(t.code,{className:\"code-highlight\",children:[(0,e.jsx)(t.span,{className:\"code-line\",children:`Title: Veggie Lovers\n`}),(0,e.jsx)(t.span,{className:\"code-line\",children:`Text: Vegie vegie stay healthy\n`}),(0,e.jsx)(t.span,{className:\"code-line\",children:`Thumbnail Image Url: https://www.calcuttaweb.com/store/image/data/calcutta/pizza/veggie-lovers-pizza-pihu-7.jpg\n`}),(0,e.jsx)(t.span,{className:\"code-line\",children:`Actions:\n`}),(0,e.jsx)(t.span,{className:\"code-line\",children:`  Label: Veggie Lovers\n`}),(0,e.jsx)(t.span,{className:\"code-line\",children:`  Type: Postback\n`}),(0,e.jsx)(t.span,{className:\"code-line\",children:`  Payload:\n`}),(0,e.jsx)(t.span,{className:\"code-line\",children:`    - key: type\n`}),(0,e.jsx)(t.span,{className:\"code-line\",children:`      value: pizza\n`}),(0,e.jsx)(t.span,{className:\"code-line\",children:`    - key: pizza\n`}),(0,e.jsx)(t.span,{className:\"code-line\",children:`      value: Veggie Lovers\n`})]})}),`\n`,(0,e.jsx)(t.p,{children:\"Your first form should look like this\"}),`\n`,(0,e.jsx)(a,{src:\"/assets/images/tutorials/bot-studio/bse-43.webp\",alt:\"bse-43\",naturalHeight:1336,naturalWidth:752}),`\n`,(0,e.jsx)(t.p,{children:\"Your second form should look like this\"}),`\n`,(0,e.jsx)(a,{src:\"/assets/images/tutorials/bot-studio/bse-44.webp\",alt:\"bse-44\",naturalHeight:1332,naturalWidth:744}),`\n`,(0,e.jsx)(t.p,{children:\"Finalize this step by clicking \\u201CCreate Action.\\u201D\"}),`\n`,(0,e.jsx)(t.p,{children:\"It should look like this\"}),`\n`,(0,e.jsx)(a,{src:\"/assets/images/tutorials/bot-studio/bse-45.webp\",alt:\"bse-45\",naturalHeight:926,naturalWidth:842}),`\n`,(0,e.jsxs)(t.p,{children:[\"Once the bot displays a carousel containing the type for pizza menu, its next step is to ask user to select the pizza. Click \\u201CAdd actions\\u201D button to trigger drop-down list, then choose \",(0,e.jsx)(t.code,{children:\"askOptions\"})]}),`\n`,(0,e.jsx)(a,{src:\"/assets/images/tutorials/bot-studio/bse-46.webp\",alt:\"bse-46\",naturalHeight:1290,naturalWidth:846}),`\n`,(0,e.jsxs)(t.p,{children:[\"After you select \",(0,e.jsx)(t.code,{children:\"askOptions\"}),\" action click \\u201CCreate Action\\u201D button to finalize this step.\"]}),`\n`,(0,e.jsx)(a,{src:\"/assets/images/tutorials/bot-studio/bse-47.webp\",alt:\"bse-47\",naturalHeight:1506,naturalWidth:848}),`\n`,(0,e.jsx)(t.p,{children:\"Your form should look like this\"}),`\n`,(0,e.jsx)(a,{src:\"/assets/images/tutorials/bot-studio/bse-48.webp\",alt:\"bse-48\",naturalHeight:1704,naturalWidth:850}),`\n`,(0,e.jsx)(t.p,{children:\"Click \\u201CUpdate\\u201D to update the state.\"}),`\n`,(0,e.jsxs)(t.h3,{id:\"create-intent-to-choose-a-pizza\",children:[(0,e.jsx)(t.a,{className:\"anchor\",href:\"#create-intent-to-choose-a-pizza\",children:(0,e.jsx)(t.span,{className:\"icon icon-link\"})}),\"Create Intent to Choose A Pizza\"]}),`\n`,(0,e.jsxs)(t.p,{children:[\"Now we have to create an intent called \",(0,e.jsx)(t.code,{children:\"pizzaChosen\"}),\" to handle user's input after they have selected a pizza type. Click on Intent menu in \",(0,e.jsx)(t.code,{children:\"order\"}),\" flow.\"]}),`\n`,(0,e.jsx)(a,{src:\"/assets/images/tutorials/bot-studio/bse-49.webp\",alt:\"bse-49\",naturalHeight:1288,naturalWidth:2716}),`\n`,(0,e.jsx)(t.p,{children:\"Click on Create Intent and create intent as follow\"}),`\n`,(0,e.jsx)(a,{src:\"/assets/images/tutorials/bot-studio/bse-50.webp\",alt:\"bse-50\",naturalHeight:1076,naturalWidth:854}),`\n`,(0,e.jsx)(t.p,{children:\"Successfully created intent looks like this\"}),`\n`,(0,e.jsx)(a,{src:\"/assets/images/tutorials/bot-studio/bse-51.webp\",alt:\"bse-51\",naturalHeight:1074,naturalWidth:3330}),`\n`,(0,e.jsxs)(t.h3,{id:\"create-transition-between-init-and-showpizza\",children:[(0,e.jsx)(t.a,{className:\"anchor\",href:\"#create-transition-between-init-and-showpizza\",children:(0,e.jsx)(t.span,{className:\"icon icon-link\"})}),\"Create Transition between init and showPizza\"]}),`\n`,(0,e.jsx)(t.p,{children:\"Now, we will create a transition between two states that we have created before.\"}),`\n`,(0,e.jsxs)(t.p,{children:[\"Click the green dot on \",(0,e.jsx)(t.code,{children:\"init\"}),\" state, and a connector line will appear. Connect that line to \",(0,e.jsx)(t.code,{children:\"showPizza\"}),\" state. If you do it right, a Create Transition form will appear.\"]}),`\n`,(0,e.jsx)(a,{src:\"/assets/images/tutorials/bot-studio/bse-52.webp\",alt:\"bse-52\",naturalHeight:888,naturalWidth:1693}),`\n`,(0,e.jsx)(t.p,{children:\"Fill in the form with these data, and click \\u201CCreate\\u201D\"}),`\n`,(0,e.jsx)(a,{src:\"/assets/images/tutorials/bot-studio/bse-52-1.webp\",alt:\"bse-52-1\",naturalHeight:1278,naturalWidth:2766}),`\n`,(0,e.jsxs)(t.h3,{id:\"create-reenter-intent\",children:[(0,e.jsx)(t.a,{className:\"anchor\",href:\"#create-reenter-intent\",children:(0,e.jsx)(t.span,{className:\"icon icon-link\"})}),\"Create 'reenter' intent\"]}),`\n`,(0,e.jsxs)(t.p,{children:[\"Next, we will add \",(0,e.jsx)(t.code,{children:\"reenter\"}),\" intent so the bot can return to its previous state after triggering fallback state. Create the intent in \",(0,e.jsx)(t.code,{children:\"order\"}),\" flow.\"]}),`\n`,(0,e.jsx)(a,{src:\"/assets/images/tutorials/bot-studio/bse-53.webp\",alt:\"bse-53\",naturalHeight:1128,naturalWidth:2802}),`\n`,(0,e.jsxs)(t.h2,{id:\"create-action-for-asking-pizza-quantity\",children:[(0,e.jsx)(t.a,{className:\"anchor\",href:\"#create-action-for-asking-pizza-quantity\",children:(0,e.jsx)(t.span,{className:\"icon icon-link\"})}),\"Create Action for Asking Pizza Quantity\"]}),`\n`,(0,e.jsx)(t.p,{children:\"In this step we will learn how to create \\u201CAsk quantity\\u201D state.\"}),`\n`,(0,e.jsx)(a,{src:\"/assets/images/tutorials/bot-studio/bse-1.webp\",alt:\"bse-1\",naturalHeight:1040,naturalWidth:1040}),`\n`,(0,e.jsxs)(t.h3,{id:\"create-pizzaquantity-state\",children:[(0,e.jsx)(t.a,{className:\"anchor\",href:\"#create-pizzaquantity-state\",children:(0,e.jsx)(t.span,{className:\"icon icon-link\"})}),\"Create pizzaQuantity state\"]}),`\n`,(0,e.jsxs)(t.p,{children:[\"In this step we will create \",(0,e.jsx)(t.code,{children:\"pizzaQuantity\"}),\" state to handle order quantity. The type of action we will use is in this state is Text. Click on \\u201C+\\u201D button on \",(0,e.jsx)(t.code,{children:\"order\"}),\" flow and fill the form as follows\"]}),`\n`,(0,e.jsx)(a,{src:\"/assets/images/tutorials/bot-studio/bse-54.webp\",alt:\"bse-54\",naturalHeight:1418,naturalWidth:786}),`\n`,(0,e.jsx)(t.p,{children:\"Then you have to make self-transition in Transition tab as follow\"}),`\n`,(0,e.jsx)(a,{src:\"/assets/images/tutorials/bot-studio/bse-54_1.webp\",alt:\"bse-54_1\",naturalHeight:920,naturalWidth:1308}),`\n`,(0,e.jsx)(t.p,{children:\"Result:\"}),`\n`,(0,e.jsx)(a,{src:\"/assets/images/tutorials/bot-studio/bse-55.webp\",alt:\"bse-55\",naturalHeight:1114,naturalWidth:1986}),`\n`,(0,e.jsxs)(t.h3,{id:\"create-nlus-quantity\",children:[(0,e.jsx)(t.a,{className:\"anchor\",href:\"#create-nlus-quantity\",children:(0,e.jsx)(t.span,{className:\"icon icon-link\"})}),\"Create NLUs quantity\"]}),`\n`,(0,e.jsx)(t.p,{children:\"Afterwards, we have to handle user's input with NLUs. Because we only allowed number from 1 to 9, we will create a limitation in regex format. Click on Create NLUs and follow this screenshot\"}),`\n`,(0,e.jsx)(a,{src:\"/assets/images/tutorials/bot-studio/bse-56.webp\",alt:\"bse-56\",naturalHeight:1062,naturalWidth:816}),`\n`,(0,e.jsx)(t.p,{children:\"Successfully created NLU will be shown like this\"}),`\n`,(0,e.jsx)(a,{src:\"/assets/images/tutorials/bot-studio/bse-57.webp\",alt:\"bse-57\",naturalHeight:870,naturalWidth:3282}),`\n`,(0,e.jsxs)(t.h3,{id:\"create-intent-quantity\",children:[(0,e.jsx)(t.a,{className:\"anchor\",href:\"#create-intent-quantity\",children:(0,e.jsx)(t.span,{className:\"icon icon-link\"})}),\"Create Intent quantity\"]}),`\n`,(0,e.jsxs)(t.p,{children:[\"After we created the NLU, we will add an intent to respond user's input. In \",(0,e.jsx)(t.code,{children:\"order\"}),\" flow, click on Create Intent and fill in the form\"]}),`\n`,(0,e.jsx)(a,{src:\"/assets/images/tutorials/bot-studio/bse-58.webp\",alt:\"bse-58\",naturalHeight:1414,naturalWidth:816}),`\n`,(0,e.jsx)(t.p,{children:\"Successfully created intent will look like this\"}),`\n`,(0,e.jsx)(a,{src:\"/assets/images/tutorials/bot-studio/bse-59.webp\",alt:\"bse-59\",naturalHeight:1104,naturalWidth:3288}),`\n`,(0,e.jsxs)(t.h3,{id:\"create-transition-between-showpizza-and-pizzaquantity\",children:[(0,e.jsx)(t.a,{className:\"anchor\",href:\"#create-transition-between-showpizza-and-pizzaquantity\",children:(0,e.jsx)(t.span,{className:\"icon icon-link\"})}),\"Create Transition between showPizza and pizzaQuantity\"]}),`\n`,(0,e.jsxs)(t.p,{children:[\"Now we have to create a transition between \",(0,e.jsx)(t.code,{children:\"showPizza\"}),\"and \",(0,e.jsx)(t.code,{children:\"pizzaQuantity\"}),\". We will also store \",(0,e.jsx)(t.code,{children:\"payload.pizza\"}),\" value into \",(0,e.jsx)(t.code,{children:\"context.pizza\"}),\". Click on the blue dot on \",(0,e.jsx)(t.code,{children:\"showPizza\"}),\" and drag the line to \",(0,e.jsx)(t.code,{children:\"pizzaQuantity\"}),\" state to create the transition. Create Transition form will appear after you have successfully connected the states.\"]}),`\n`,(0,e.jsx)(a,{src:\"/assets/images/tutorials/bot-studio/bse-60.webp\",alt:\"bse-60\",naturalHeight:1244,naturalWidth:866}),`\n`,(0,e.jsx)(t.p,{children:\"Created transition will look like this\"}),`\n`,(0,e.jsx)(a,{src:\"/assets/images/tutorials/bot-studio/bse-61.webp\",alt:\"bse-61\",naturalHeight:1082,naturalWidth:2298}),`\n`,(0,e.jsxs)(t.h2,{id:\"create-confirmation-action\",children:[(0,e.jsx)(t.a,{className:\"anchor\",href:\"#create-confirmation-action\",children:(0,e.jsx)(t.span,{className:\"icon icon-link\"})}),\"Create Confirmation Action\"]}),`\n`,(0,e.jsxs)(t.p,{children:[\"Our next step is creating \",(0,e.jsx)(t.code,{children:\"Ask confirmation\"}),\" state.\"]}),`\n`,(0,e.jsx)(a,{src:\"/assets/images/tutorials/bot-studio/bse-1.webp\",alt:\"bse-1\",naturalHeight:1040,naturalWidth:1040}),`\n`,(0,e.jsxs)(t.h3,{id:\"create-yesno-keyword-nlus\",children:[(0,e.jsx)(t.a,{className:\"anchor\",href:\"#create-yesno-keyword-nlus\",children:(0,e.jsx)(t.span,{className:\"icon icon-link\"})}),\"Create \\u201CYESNO\\u201D keyword NLUs\"]}),`\n`,(0,e.jsxs)(t.p,{children:[\"First, we will create a keyword NLU to handle \",(0,e.jsx)(t.code,{children:\"yes\"}),\" and \",(0,e.jsx)(t.code,{children:\"no\"}),\". Click on Create NLUs and fill in as follows\"]}),`\n`,(0,e.jsx)(a,{src:\"/assets/images/tutorials/bot-studio/bse-62.webp\",alt:\"bse-62\",naturalHeight:1512,naturalWidth:832}),`\n`,(0,e.jsx)(t.p,{children:\"Successfully created NLU will look like this\"}),`\n`,(0,e.jsx)(a,{src:\"/assets/images/tutorials/bot-studio/bse-63.webp\",alt:\"bse-63\",naturalHeight:1164,naturalWidth:3270}),`\n`,(0,e.jsxs)(t.h3,{id:\"create-confirmpizza-state\",children:[(0,e.jsx)(t.a,{className:\"anchor\",href:\"#create-confirmpizza-state\",children:(0,e.jsx)(t.span,{className:\"icon icon-link\"})}),\"Create confirmPizza state\"]}),`\n`,(0,e.jsxs)(t.p,{children:[\"Now we will create \",(0,e.jsx)(t.code,{children:\"confirmPizza\"}),\" state to handle order confirmation. We will also store chosen pizza & quantity information in this state. Select \",(0,e.jsx)(t.code,{children:\"order\"}),\" flow and click on \\u201C+\\u201D button to create \",(0,e.jsx)(t.code,{children:\"confirmPizza\"}),\" state.\"]}),`\n`,(0,e.jsx)(a,{src:\"/assets/images/tutorials/bot-studio/bse-64.webp\",alt:\"bse-64\",naturalHeight:1408,naturalWidth:758}),`\n`,(0,e.jsxs)(t.h2,{id:\"add-mapping-in-ontransit-tab\",children:[(0,e.jsx)(t.a,{className:\"anchor\",href:\"#add-mapping-in-ontransit-tab\",children:(0,e.jsx)(t.span,{className:\"icon icon-link\"})}),\"Add mapping in onTransit tab\"]}),`\n`,(0,e.jsx)(a,{src:\"/assets/images/tutorials/bot-studio/bse-67.webp\",alt:\"bse-67\",naturalHeight:510,naturalWidth:760}),`\n`,(0,e.jsx)(t.p,{children:\"Don't forget to add self-transition in a state. Click Create Action. Your screen should look like this\"}),`\n`,(0,e.jsx)(a,{src:\"/assets/images/tutorials/bot-studio/bse-65.webp\",alt:\"bse-65\",naturalHeight:1192,naturalWidth:2330}),`\n`,(0,e.jsxs)(t.h3,{id:\"create-a-transition-from-pizzaquantity-to-confirmpizza\",children:[(0,e.jsx)(t.a,{className:\"anchor\",href:\"#create-a-transition-from-pizzaquantity-to-confirmpizza\",children:(0,e.jsx)(t.span,{className:\"icon icon-link\"})}),\"Create a transition from pizzaQuantity to confirmPizza\"]}),`\n`,(0,e.jsxs)(t.p,{children:[\"We will make a transition by storing value (mapping) from pizza quantity \",(0,e.jsx)(t.strong,{children:\"and\"}),\" chosen pizza type. Click the blue dot on \",(0,e.jsx)(t.code,{children:\"pizzaQuantity\"}),\" and drag the line to \",(0,e.jsx)(t.code,{children:\"confirmPizza\"}),\" state to create a transition. Create Transition form will appear after you successfully connected the states.\"]}),`\n`,(0,e.jsx)(a,{src:\"/assets/images/tutorials/bot-studio/bse-66.webp\",alt:\"bse-66\",naturalHeight:1324,naturalWidth:846}),`\n`,(0,e.jsx)(t.p,{children:\"Result will be shown as follows\"}),`\n`,(0,e.jsx)(a,{src:\"/assets/images/tutorials/bot-studio/bse-68.webp\",alt:\"bse-68\",naturalHeight:990,naturalWidth:2420}),`\n`,(0,e.jsxs)(t.h3,{id:\"create-intent-yesno\",children:[(0,e.jsx)(t.a,{className:\"anchor\",href:\"#create-intent-yesno\",children:(0,e.jsx)(t.span,{className:\"icon icon-link\"})}),\"Create intent yesno\"]}),`\n`,(0,e.jsxs)(t.p,{children:[\"Previously, we already made an NLU containing \",(0,e.jsx)(t.code,{children:\"yes\"}),\" and \",(0,e.jsx)(t.code,{children:\"no\"}),\" keywords. We will use that NLU as a classifier on an intent.\"]}),`\n`,(0,e.jsxs)(t.p,{children:[\"First of all, we will create an intent in \",(0,e.jsx)(t.code,{children:\"order\"}),\" flow for the keyword \",(0,e.jsx)(t.code,{children:\"yes\"})]}),`\n`,(0,e.jsx)(a,{src:\"/assets/images/tutorials/bot-studio/bse-69.webp\",alt:\"bse-69\",naturalHeight:1422,naturalWidth:804}),`\n`,(0,e.jsxs)(t.p,{children:[\"Then, we will create an intent for keyword \",(0,e.jsx)(t.code,{children:\"no\"})]}),`\n`,(0,e.jsx)(a,{src:\"/assets/images/tutorials/bot-studio/bse-70.webp\",alt:\"bse-70\",naturalHeight:1392,naturalWidth:822}),`\n`,(0,e.jsx)(t.p,{children:\"Both intent will appear as follows\"}),`\n`,(0,e.jsx)(a,{src:\"/assets/images/tutorials/bot-studio/bse-71.webp\",alt:\"bse-71\",naturalHeight:1378,naturalWidth:3276}),`\n`,(0,e.jsxs)(t.h3,{id:\"create-done-state\",children:[(0,e.jsx)(t.a,{className:\"anchor\",href:\"#create-done-state\",children:(0,e.jsx)(t.span,{className:\"icon icon-link\"})}),\"Create done state\"]}),`\n`,(0,e.jsxs)(t.p,{children:[\"In \",(0,e.jsx)(t.code,{children:\"done\"}),\" state, we will complete the order by saying thank you and end the conversation. We will also set a condition when a user wants to cancel the order. So in this state we will create two actions: \",(0,e.jsx)(t.code,{children:\"sayThanks\"}),\" and \",(0,e.jsx)(t.code,{children:\"sayCancel\"}),\".\"]}),`\n`,(0,e.jsx)(a,{src:\"/assets/images/tutorials/bot-studio/bse-72.webp\",alt:\"bse-72\",naturalHeight:940,naturalWidth:798}),`\n`,(0,e.jsx)(a,{src:\"/assets/images/tutorials/bot-studio/bse-73.webp\",alt:\"bse-73\",naturalHeight:914,naturalWidth:786}),`\n`,(0,e.jsx)(t.p,{children:\"Also, don't forget to add self transition in the state. Result:\"}),`\n`,(0,e.jsx)(a,{src:\"/assets/images/tutorials/bot-studio/bse-74.webp\",alt:\"bse-74\",naturalHeight:1218,naturalWidth:2390}),`\n`,(0,e.jsxs)(t.h3,{id:\"create-a-transition-from-confirmpizza-to-done\",children:[(0,e.jsx)(t.a,{className:\"anchor\",href:\"#create-a-transition-from-confirmpizza-to-done\",children:(0,e.jsx)(t.span,{className:\"icon icon-link\"})}),\"Create a transition from confirmPizza to done\"]}),`\n`,(0,e.jsxs)(t.p,{children:[\"Next, we will connect \",(0,e.jsx)(t.code,{children:\"confirmPizza\"}),\" state to \",(0,e.jsx)(t.code,{children:\"done\"}),\" state. Because \",(0,e.jsx)(t.code,{children:\"done\"}),\" is the last state, we will set it as default transition. Connect \",(0,e.jsx)(t.code,{children:\"confirmPizza\"}),\" to \",(0,e.jsx)(t.code,{children:\"done\"}),\" by clicking the blue dot and drag the line to connect the states. Create Transition form will appear after you have successfully connected the states.\"]}),`\n`,(0,e.jsx)(a,{src:\"/assets/images/tutorials/bot-studio/bse-75.webp\",alt:\"bse-75\",naturalHeight:1084,naturalWidth:840}),`\n`,(0,e.jsx)(t.p,{children:\"Final flow:\"}),`\n`,(0,e.jsx)(a,{src:\"/assets/images/tutorials/bot-studio/bse-76.webp\",alt:\"bse-76\",naturalHeight:1208,naturalWidth:3262}),`\n`,(0,e.jsxs)(t.h2,{id:\"publish-your-bot\",children:[(0,e.jsx)(t.a,{className:\"anchor\",href:\"#publish-your-bot\",children:(0,e.jsx)(t.span,{className:\"icon icon-link\"})}),\"Publish Your Bot\"]}),`\n`,(0,e.jsx)(t.p,{children:\"To save your work, click on Publish button located at the top right of your screen. Fill in the changelog as \\u201Cinitial version of pizza bot\\u201D for future reference. Click \\u201CPublish\\u201D to continue.\"}),`\n`,(0,e.jsx)(a,{src:\"/assets/images/tutorials/bot-studio/bse-77.webp\",alt:\"bse-77\",naturalHeight:1218,naturalWidth:2390}),`\n`,(0,e.jsx)(a,{src:\"/assets/images/tutorials/bot-studio/bse-78.webp\",alt:\"bse-78\",naturalHeight:974,naturalWidth:1066}),`\n`,(0,e.jsx)(t.p,{children:\"Every time you publish a bot, it will record a hash number (similar to Git's hash number) in Revision List.\"}),`\n`,(0,e.jsx)(a,{src:\"/assets/images/tutorials/bot-studio/bse-79.webp\",alt:\"bse-79\",naturalHeight:538,naturalWidth:3298}),`\n`,(0,e.jsxs)(t.h2,{id:\"testing-your-chatbot\",children:[(0,e.jsx)(t.a,{className:\"anchor\",href:\"#testing-your-chatbot\",children:(0,e.jsx)(t.span,{className:\"icon icon-link\"})}),\"Testing Your Chatbot\"]}),`\n`,(0,e.jsxs)(t.p,{children:[\"Click on Test Chatbot on Bot Studio then type \\u201Corder\\u201D to initialize \",(0,e.jsx)(t.code,{children:\"order\"}),\" flow.\"]}),`\n`,(0,e.jsx)(a,{src:\"/assets/images/tutorials/bot-studio/bse-80.webp\",alt:\"bse-80\",naturalHeight:994,naturalWidth:1740}),`\n`,(0,e.jsx)(t.p,{children:\"Check on the rest of the flow and make sure everything you've made works.\"}),`\n`,(0,e.jsxs)(t.h2,{id:\"deploy-your-chatbot\",children:[(0,e.jsx)(t.a,{className:\"anchor\",href:\"#deploy-your-chatbot\",children:(0,e.jsx)(t.span,{className:\"icon icon-link\"})}),\"Deploy Your Chatbot\"]}),`\n`,(0,e.jsx)(t.p,{children:\"Now we will try to deploy our chatbot to LINE Messenger.\"}),`\n`,(0,e.jsxs)(t.h3,{id:\"create-deployment\",children:[(0,e.jsx)(t.a,{className:\"anchor\",href:\"#create-deployment\",children:(0,e.jsx)(t.span,{className:\"icon icon-link\"})}),\"Create deployment\"]}),`\n`,(0,e.jsx)(t.p,{children:\"First of all, we have to create a deployment first. Find the \\u201CDeployment\\u201D menu on the left sidebar.\"}),`\n`,(0,e.jsx)(a,{src:\"/assets/images/tutorials/bot-studio/bse-81.webp\",alt:\"bse-81\",naturalHeight:1118,naturalWidth:648}),`\n`,(0,e.jsx)(t.p,{children:\"Click on Create Deployment button on top right\"}),`\n`,(0,e.jsx)(a,{src:\"/assets/images/tutorials/bot-studio/bse-82.webp\",alt:\"bse-82\",naturalHeight:794,naturalWidth:3296}),`\n`,(0,e.jsx)(t.p,{children:\"Choose Patch on Deployment Version.\"}),`\n`,(0,e.jsx)(a,{src:\"/assets/images/tutorials/bot-studio/bse-83.webp\",alt:\"bse-83\",naturalHeight:932,naturalWidth:1557}),`\n`,(0,e.jsx)(t.p,{children:\"Succesfully created deployment looks like this.\"}),`\n`,(0,e.jsx)(a,{src:\"/assets/images/tutorials/bot-studio/bse-84.webp\",alt:\"bse-84\",naturalHeight:511,naturalWidth:1906}),`\n`,(0,e.jsxs)(t.h3,{id:\"create-environment\",children:[(0,e.jsx)(t.a,{className:\"anchor\",href:\"#create-environment\",children:(0,e.jsx)(t.span,{className:\"icon icon-link\"})}),\"Create Environment\"]}),`\n`,(0,e.jsx)(t.p,{children:\"Kata | Platform 3.0 allows you to set up 3 separate environments in your project: Development, Staging, and Production. Inside each environment, you can add as many messaging channel as you like. You have to setup environment first before integrating to messaging channel.\"}),`\n`,(0,e.jsx)(t.p,{children:\"In this tutorial, we will try to setup Production environment. Click on Environment menu under Deploy and you will be shown 3 available environments.\"}),`\n`,(0,e.jsx)(a,{src:\"/assets/images/tutorials/bot-studio/bse-85.webp\",alt:\"bse-85\",naturalHeight:1230,naturalWidth:3342}),`\n`,(0,e.jsx)(t.p,{children:\"Click \\u201CCreate Environment\\u201D button in Production.\"}),`\n`,(0,e.jsx)(t.p,{children:\"The first field we have to fill in is deployment version. Choose 0.0.1 (shown on the previous step) as deployment version in Production.\"}),`\n`,(0,e.jsx)(t.p,{children:\"Another field we have to fill in is environment URL. This URL is used to access CMS Client later.\"}),`\n`,(0,e.jsx)(a,{src:\"/assets/images/tutorials/bot-studio/bse-86.webp\",alt:\"bse-86\",naturalHeight:788,naturalWidth:858}),`\n`,(0,e.jsx)(t.p,{children:\"Successfully created environment will look like this\"}),`\n`,(0,e.jsx)(a,{src:\"/assets/images/tutorials/bot-studio/bse-87.webp\",alt:\"bse-87\",naturalHeight:480,naturalWidth:882}),`\n`,(0,e.jsx)(t.p,{children:\"Next, we need to create channel inside the environment. Click on Create Channel on Production environment and you will be redirected to Create Channel page\"}),`\n`,(0,e.jsx)(a,{src:\"/assets/images/tutorials/bot-studio/bse-88.webp\",alt:\"bse-88\",naturalHeight:1342,naturalWidth:3352}),`\n`,(0,e.jsx)(t.p,{children:\"Next, click \\u201CCreate Channel\\u201D and fill in as follows\"}),`\n`,(0,e.jsx)(a,{src:\"/assets/images/tutorials/bot-studio/bse-89.webp\",alt:\"bse-89\",naturalHeight:1280,naturalWidth:916}),`\n`,(0,e.jsx)(t.p,{children:\"Let's setup LINE developer console so you can fill in fields highlighted with red box.\"}),`\n`,(0,e.jsxs)(t.h3,{id:\"registration-to-line-developer-console\",children:[(0,e.jsx)(t.a,{className:\"anchor\",href:\"#registration-to-line-developer-console\",children:(0,e.jsx)(t.span,{className:\"icon icon-link\"})}),\"Registration to LINE Developer console\"]}),`\n`,(0,e.jsx)(t.p,{children:(0,e.jsx)(t.strong,{children:\"Create LINE account\"})}),`\n`,(0,e.jsxs)(t.p,{children:[\"To sign up for a LINE developer account, you have to have a LINE account by \",(0,e.jsx)(\"a\",{href:\"https://line.me/en/download\",target:\"_blank\",children:\" installing LINE application, either desktop or mobile app.\"}),\" After you successfully registered, sign in to \",(0,e.jsx)(\"a\",{href:\"https://developers.line.biz/en/\",target:\"_blank\",children:(0,e.jsx)(t.a,{href:\"https://developers.line.biz/en/\",children:\"https://developers.line.biz/en/\"})})]}),`\n`,(0,e.jsx)(t.p,{children:\"In LINE Developer Console click Log In.\"}),`\n`,(0,e.jsx)(a,{src:\"/assets/images/tutorials/bot-studio/bse-90.webp\",alt:\"bse-90\",naturalHeight:1726,naturalWidth:3358}),`\n`,(0,e.jsx)(t.p,{children:\"Click on Log in with LINE\"}),`\n`,(0,e.jsx)(a,{src:\"/assets/images/tutorials/bot-studio/bse-91.webp\",alt:\"bse-91\",naturalHeight:1134,naturalWidth:1054}),`\n`,(0,e.jsx)(t.p,{children:\"Enter your email and password\"}),`\n`,(0,e.jsx)(a,{src:\"/assets/images/tutorials/bot-studio/bse-92.webp\",alt:\"bse-92\",naturalHeight:1046,naturalWidth:994}),`\n`,(0,e.jsx)(t.p,{children:\"After you successfully logged in, you will be redirected to provider list dashboard\"}),`\n`,(0,e.jsx)(a,{src:\"/assets/images/tutorials/bot-studio/bse-93.webp\",alt:\"bse-93\",naturalHeight:1686,naturalWidth:3328}),`\n`,(0,e.jsx)(t.p,{children:(0,e.jsx)(t.strong,{children:\"Create a Provider\"})}),`\n`,(0,e.jsx)(t.p,{children:\"Click \\u201CCreate New Provider\\u201D\"}),`\n`,(0,e.jsx)(a,{src:\"/assets/images/tutorials/bot-studio/bse-94.webp\",alt:\"bse-94\",naturalHeight:1158,naturalWidth:2814}),`\n`,(0,e.jsx)(t.p,{children:\"Fill in provider name\"}),`\n`,(0,e.jsx)(a,{src:\"/assets/images/tutorials/bot-studio/bse-95.webp\",alt:\"bse-95\",naturalHeight:1382,naturalWidth:3358}),`\n`,(0,e.jsx)(t.p,{children:\"Click Confirm to continue. You will have to re-confirm the provider name since it cannot be changed later. Click \\u201CCreate\\u201D to confirm.\"}),`\n`,(0,e.jsx)(a,{src:\"/assets/images/tutorials/bot-studio/bse-96.webp\",alt:\"bse-96\",naturalHeight:1154,naturalWidth:3358}),`\n`,(0,e.jsxs)(t.h3,{id:\"setup-channel-for-line-integration\",children:[(0,e.jsx)(t.a,{className:\"anchor\",href:\"#setup-channel-for-line-integration\",children:(0,e.jsx)(t.span,{className:\"icon icon-link\"})}),\"Setup Channel for LINE Integration\"]}),`\n`,(0,e.jsx)(t.p,{children:\"Setup channel in Messaging API by clicking Create Channel on Messaging API.\"}),`\n`,(0,e.jsx)(a,{src:\"/assets/images/tutorials/bot-studio/bse-97.webp\",alt:\"bse-97\",naturalHeight:1438,naturalWidth:2812}),`\n`,(0,e.jsx)(t.p,{children:\"Fill in the form as follows\"}),`\n`,(0,e.jsx)(a,{src:\"/assets/images/tutorials/bot-studio/bse-98.webp\",alt:\"bse-98\",naturalHeight:1714,naturalWidth:3348}),`\n`,(0,e.jsx)(a,{src:\"/assets/images/tutorials/bot-studio/bse-99.webp\",alt:\"bse-99\",naturalHeight:536,naturalWidth:2726}),`\n`,(0,e.jsxs)(t.p,{children:[\"Next, you have to choose \",(0,e.jsx)(t.strong,{children:\"Developer Trial as Plan\"})]}),`\n`,(0,e.jsx)(a,{src:\"/assets/images/tutorials/bot-studio/bse-100.webp\",alt:\"bse-100\",naturalHeight:510,naturalWidth:2322}),`\n`,(0,e.jsx)(t.p,{children:\"Accept Terms of Use from LINE then click Create\"}),`\n`,(0,e.jsx)(a,{src:\"/assets/images/tutorials/bot-studio/bse-101.webp\",alt:\"bse-101\",naturalHeight:548,naturalWidth:1970}),`\n`,(0,e.jsx)(t.p,{children:\"Successfuly created channel will look like this\"}),`\n`,(0,e.jsx)(a,{src:\"/assets/images/tutorials/bot-studio/bse-102.webp\",alt:\"bse-102\",naturalHeight:1012,naturalWidth:1176}),`\n`,(0,e.jsxs)(t.h3,{id:\"integration-line-and-your-chatbot\",children:[(0,e.jsx)(t.a,{className:\"anchor\",href:\"#integration-line-and-your-chatbot\",children:(0,e.jsx)(t.span,{className:\"icon icon-link\"})}),\"Integration LINE and Your Chatbot\"]}),`\n`,(0,e.jsx)(t.p,{children:\"Click on created channel to fill in Channel Access Token and Channel Secret. Here is the guideline to fill in those fields\"}),`\n`,(0,e.jsxs)(t.h4,{id:\"fill-in-channel-access-token-field\",children:[(0,e.jsx)(t.a,{className:\"anchor\",href:\"#fill-in-channel-access-token-field\",children:(0,e.jsx)(t.span,{className:\"icon icon-link\"})}),\"Fill in Channel Access Token field\"]}),`\n`,(0,e.jsx)(t.p,{children:\"Click \\u201CIssue\\u201D in Messaging Settings section\"}),`\n`,(0,e.jsx)(a,{src:\"/assets/images/tutorials/bot-studio/bse-103.webp\",alt:\"bse-103\",naturalHeight:1086,naturalWidth:2724}),`\n`,(0,e.jsx)(t.p,{children:\"Then, issue dialog will pop up. Click on Issue to continue\"}),`\n`,(0,e.jsx)(a,{src:\"/assets/images/tutorials/bot-studio/bse-104.webp\",alt:\"bse-104\",naturalHeight:782,naturalWidth:1084}),`\n`,(0,e.jsx)(t.p,{children:\"Then, copy Channel Access Token below and paste it on Create Channel form in Kata | Platform\"}),`\n`,(0,e.jsx)(a,{src:\"/assets/images/tutorials/bot-studio/bse-105.webp\",alt:\"bse-105\",naturalHeight:380,naturalWidth:2732}),`\n`,(0,e.jsx)(a,{src:\"/assets/images/tutorials/bot-studio/bse-106.webp\",alt:\"bse-106\",naturalHeight:964,naturalWidth:740}),`\n`,(0,e.jsx)(t.p,{children:(0,e.jsx)(t.strong,{children:\"Fill in Channel Secret field\"})}),`\n`,(0,e.jsx)(t.p,{children:\"In Basic Information, copy Channel Secret from LINE to Kata | Platform\"}),`\n`,(0,e.jsx)(a,{src:\"/assets/images/tutorials/bot-studio/bse-107.webp\",alt:\"bse-107\",naturalHeight:1612,naturalWidth:2896}),`\n`,(0,e.jsx)(a,{src:\"/assets/images/tutorials/bot-studio/bse-108.webp\",alt:\"bse-108\",naturalHeight:996,naturalWidth:766}),`\n`,(0,e.jsx)(t.p,{children:\"Final result in Kata | Platform will look like this\"}),`\n`,(0,e.jsx)(a,{src:\"/assets/images/tutorials/bot-studio/bse-109.webp\",alt:\"bse-109\",naturalHeight:996,naturalWidth:766}),`\n`,(0,e.jsx)(t.p,{children:\"Click \\u201CCreate\\u201D to generate webhook URL from Kata | Platform.\"}),`\n`,(0,e.jsx)(a,{src:\"/assets/images/tutorials/bot-studio/bse-110.webp\",alt:\"bse-110\",naturalHeight:506,naturalWidth:2780}),`\n`,(0,e.jsxs)(t.p,{children:[\"After webhook URL is generated, go to Messaging Settings in LINE developer console to enable webhook. \",(0,e.jsx)(t.strong,{children:'Please check that you already enable the webhook by click on Enable in \"Use Webhoooks\" section which placed above Webhook URL field'})]}),`\n`,(0,e.jsx)(a,{src:\"/assets/images/tutorials/bot-studio/bse-111.webp\",alt:\"bse-111\",naturalHeight:678,naturalWidth:2832}),`\n`,(0,e.jsx)(t.p,{children:\"Click \\u201CUpdate\\u201D then paste the webhook URL to LINE developer console.\"}),`\n`,(0,e.jsx)(a,{src:\"/assets/images/tutorials/bot-studio/bse-112.webp\",alt:\"bse-112\",naturalHeight:892,naturalWidth:2820}),`\n`,(0,e.jsx)(t.p,{children:\"Click \\u201CUpdate\\u201D then click \\u201CVerify.\\u201D\"}),`\n`,(0,e.jsx)(a,{src:\"/assets/images/tutorials/bot-studio/bse-113.webp\",alt:\"bse-113\",naturalHeight:928,naturalWidth:2836}),`\n`,(0,e.jsx)(t.p,{children:\"Next, disable auto-reply messages and greeting messages\"}),`\n`,(0,e.jsx)(a,{src:\"/assets/images/tutorials/bot-studio/bse-114.webp\",alt:\"bse-114\",naturalHeight:856,naturalWidth:2828}),`\n`,(0,e.jsx)(t.p,{children:\"Voila! You have successfully deployed your bot to LINE Messenger.\"}),`\n`,(0,e.jsx)(t.p,{children:\"Scan the QR Code in LINE Developer Console to add the bot.\"}),`\n`,(0,e.jsx)(a,{src:\"/assets/images/tutorials/bot-studio/bse-115.webp\",alt:\"bse-115\",naturalHeight:582,naturalWidth:2082}),`\n`,(0,e.jsx)(t.p,{children:\"Then, test to scan QR Code\"}),`\n`,(0,e.jsx)(a,{src:\"/assets/images/tutorials/bot-studio/bse-116.webp\",alt:\"bse-116\",naturalHeight:1920,naturalWidth:1080})]})}}var z=N;function C(n,i){throw new Error(\"Expected \"+(i?\"component\":\"object\")+\" `\"+n+\"` to be defined: you likely forgot to import, pass, or provide it.\")}return k(W);})();\n;return Component;"},"_id":"tutorials/bot-studio.mdx","_raw":{"sourceFilePath":"tutorials/bot-studio.mdx","sourceFileName":"bot-studio.mdx","sourceFileDir":"tutorials","contentType":"mdx","flattenedPath":"tutorials/bot-studio"},"type":"Tutorials","slug":["bot-studio"],"excerpt":"\n## Introduction\n\nBuilding a chatbot on Kata | Platform is quick and easy, even with a lack of programming knowledge. In this tutorial, we will learn how to create a simple bot on LINE Messenger to order a pizza"},"toc":{"items":[{"title":"Tutorial","items":[{"title":"Bot Studio Tutorial","useAccordion":true,"items":[{"url":"#introduction","title":"Introduction"},{"url":"#sign-up-to-kata--platform","title":"Sign up to Kata | Platform"},{"url":"#create-a-project","title":"Create a Project"},{"url":"#create-fallback-flow","title":"Create Fallback Flow"},{"url":"#create-order-flow","title":"Create Order Flow"},{"url":"#create-action-for-pizza-menu","title":"Create Action for Pizza Menu"},{"url":"#create-action-for-asking-pizza-quantity","title":"Create Action for Asking Pizza Quantity"},{"url":"#create-confirmation-action","title":"Create Confirmation Action"},{"url":"#add-mapping-in-ontransit-tab","title":"Add mapping in onTransit tab"},{"url":"#publish-your-bot","title":"Publish Your Bot"},{"url":"#testing-your-chatbot","title":"Testing Your Chatbot"},{"url":"#deploy-your-chatbot","title":"Deploy Your Chatbot"}]}]}]}},"__N_SSG":true}